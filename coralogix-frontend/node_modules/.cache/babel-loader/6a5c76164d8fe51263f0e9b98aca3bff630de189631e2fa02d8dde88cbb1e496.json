{"ast":null,"code":"import { InstrumentationBase } from '@opentelemetry/instrumentation';\nimport { LONG_TASK_INSTRUMENTATION_VERSION, LONG_TASK_PERFORMANCE_TYPE } from './instrumentation.consts';\nimport { CoralogixEventType, PerformanceTypes } from '../types';\nimport { CoralogixAttributes } from '../constants';\nimport { deepClone, generateUUID, supportedPerformanceTypes } from '../utils';\nexport class CoralogixLongTaskInstrumentation extends InstrumentationBase {\n  constructor(config) {\n    super(LONG_TASK_PERFORMANCE_TYPE, LONG_TASK_INSTRUMENTATION_VERSION, config);\n    if (supportedPerformanceTypes[PerformanceTypes.LongTask]) {\n      this.registerToLongTasks();\n    } else {\n      console.warn('Coralogix Browser SDK - browser doesnt support longtask events');\n    }\n  }\n  registerToLongTasks() {\n    this.longTaskObserver = new PerformanceObserver(list => {\n      list.getEntries().forEach(entry => this.createSpanFromLongTask(entry));\n    });\n    this.longTaskObserver.observe({\n      type: PerformanceTypes.LongTask,\n      buffered: true\n    });\n  }\n  createSpanFromLongTask(entry) {\n    const longTaskSpan = this.tracer.startSpan(CoralogixEventType.LONG_TASK);\n    const longTaskContext = Object.assign(Object.assign({}, deepClone(entry)), {\n      id: generateUUID()\n    });\n    if (entry['toJSON']) {\n      delete longTaskContext['toJSON'];\n    }\n    if (entry['attribution']) {\n      delete longTaskContext['attribution'];\n    }\n    longTaskSpan.setAttribute(CoralogixAttributes.EVENT_TYPE, CoralogixEventType.LONG_TASK);\n    longTaskSpan.setAttribute(LONG_TASK_PERFORMANCE_TYPE, JSON.stringify(longTaskContext));\n    longTaskSpan.end();\n  }\n  enable() {}\n  disable() {\n    var _a;\n    (_a = this.longTaskObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n  }\n  init() {\n    return undefined;\n  }\n}","map":{"version":3,"names":["InstrumentationBase","LONG_TASK_INSTRUMENTATION_VERSION","LONG_TASK_PERFORMANCE_TYPE","CoralogixEventType","PerformanceTypes","CoralogixAttributes","deepClone","generateUUID","supportedPerformanceTypes","CoralogixLongTaskInstrumentation","constructor","config","LongTask","registerToLongTasks","console","warn","longTaskObserver","PerformanceObserver","list","getEntries","forEach","entry","createSpanFromLongTask","observe","type","buffered","longTaskSpan","tracer","startSpan","LONG_TASK","longTaskContext","Object","assign","id","setAttribute","EVENT_TYPE","JSON","stringify","end","enable","disable","_a","disconnect","init","undefined"],"sources":["../../../../../libs/browser/src/instrumentations/CoralogixLongTaskInstrumentation.ts"],"sourcesContent":[null],"mappings":"AAAA,SACEA,mBAAmB,QAEd,gCAAgC;AACvC,SACEC,iCAAiC,EACjCC,0BAA0B,QACrB,0BAA0B;AAEjC,SACEC,kBAAkB,EAElBC,gBAAgB,QACX,UAAU;AACjB,SAASC,mBAAmB,QAAQ,cAAc;AAClD,SAASC,SAAS,EAAEC,YAAY,EAAEC,yBAAyB,QAAQ,UAAU;AAE7E,OAAM,MAAOC,gCAAiC,SAAQT,mBAAmB;EAGvEU,YAAYC,MAA6B;IACvC,KAAK,CACHT,0BAA0B,EAC1BD,iCAAiC,EACjCU,MAAM,CACP;IAED,IAAIH,yBAAyB,CAACJ,gBAAgB,CAACQ,QAAQ,CAAC,EAAE;MACxD,IAAI,CAACC,mBAAmB,EAAE;KAC3B,MAAM;MACLC,OAAO,CAACC,IAAI,CACV,gEAAgE,CACjE;;EAEL;EAEQF,mBAAmBA,CAAA;IACzB,IAAI,CAACG,gBAAgB,GAAG,IAAIC,mBAAmB,CAC5CC,IAAkC,IAAI;MACrCA,IAAI,CACDC,UAAU,EAAE,CACZC,OAAO,CAAEC,KAAuB,IAC/B,IAAI,CAACC,sBAAsB,CAACD,KAAK,CAAC,CACnC;IACL,CAAC,CACF;IAED,IAAI,CAACL,gBAAgB,CAACO,OAAO,CAAC;MAC5BC,IAAI,EAAEpB,gBAAgB,CAACQ,QAAQ;MAC/Ba,QAAQ,EAAE;KACX,CAAC;EACJ;EAEQH,sBAAsBA,CAACD,KAAuB;IACpD,MAAMK,YAAY,GAAS,IAAI,CAACC,MAAM,CAACC,SAAS,CAC9CzB,kBAAkB,CAAC0B,SAAS,CAC7B;IAED,MAAMC,eAAe,GAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAChB1B,SAAS,CAACe,KAAK,CAAC;MACnBY,EAAE,EAAE1B,YAAY;IAAE,EACnB;IAED,IAAIc,KAAK,CAAC,QAAQ,CAAC,EAAE;MACnB,OAAOS,eAAe,CAAC,QAAQ,CAAC;;IAGlC,IAAIT,KAAK,CAAC,aAAa,CAAC,EAAE;MACxB,OAAOS,eAAe,CAAC,aAAa,CAAC;;IAGvCJ,YAAY,CAACQ,YAAY,CACvB7B,mBAAmB,CAAC8B,UAAU,EAC9BhC,kBAAkB,CAAC0B,SAAS,CAC7B;IAEDH,YAAY,CAACQ,YAAY,CACvBhC,0BAA0B,EAC1BkC,IAAI,CAACC,SAAS,CAACP,eAAe,CAAC,CAChC;IAEDJ,YAAY,CAACY,GAAG,EAAE;EACpB;EAESC,MAAMA,CAAA,GAAI;EAEVC,OAAOA,CAAA;;IACd,CAAAC,EAAA,OAAI,CAACzB,gBAAgB,cAAAyB,EAAA,uBAAAA,EAAA,CAAEC,UAAU,EAAE;EACrC;EAEUC,IAAIA,CAAA;IACZ,OAAOC,SAAS;EAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}