{"ast":null,"code":"import { CoralogixEventType, OtelNetworkAttrs } from '../types';\nimport { CoralogixAttributes, CX_MAPPED_SPAN, NETWORK_URL_LABEL_PROVIDERS_KEY, PAGE_URL_LABEL_PROVIDERS_KEY } from '../constants';\nimport { CoralogixLogSeverity } from '../types-external';\nimport { SDK_VERSION } from '../version';\nimport { applyUrlBluePrinters, deepClone, flattenAttributes, getInternalRumData, getUrlFragments, hrTimeToMilliseconds, parseUserAgent } from '../utils';\nimport ErrorStackParser from 'error-stack-parser';\nimport { LONG_TASK_PERFORMANCE_TYPE, RESOURCES_INSTRUMENTATION_NAME, WEB_VITALS_INSTRUMENTATION_NAME } from '../instrumentations/instrumentation.consts';\nimport { getSdkConfig, getSessionManager, getSessionRecorder } from '../helpers';\nimport { shouldDropEvent } from '../filters/filters';\nimport { processBeforeSend } from '../before-send';\nimport { isProcessorShouldStop } from './processor.helper';\nimport { getNowTime } from '../utils/time';\nexport class CoralogixSpanMapProcessor {\n  constructor() {\n    this.sdkConfig = getSdkConfig();\n    this.isActive = true;\n  }\n  onEnd(span) {\n    var _a;\n    if (isProcessorShouldStop(this.isActive)) {\n      return;\n    }\n    const {\n      onlySessionWithErrorMode,\n      getPrevSession,\n      getSession,\n      setSession\n    } = getSessionManager();\n    const session = getSession() || setSession();\n    const sessionHasRecording = !!((_a = getSessionRecorder()) === null || _a === void 0 ? void 0 : _a.getSessionHasRecording());\n    const mappedCxSpan = this._mapToCxSpan(span, session, getPrevSession(), sessionHasRecording, onlySessionWithErrorMode);\n    if (!shouldDropEvent(mappedCxSpan.text.cx_rum, this.sdkConfig)) {\n      const resolvedCxSpan = processBeforeSend(mappedCxSpan, this.sdkConfig);\n      if (resolvedCxSpan) {\n        const isSeverityError = resolvedCxSpan.severity === CoralogixLogSeverity.Error;\n        const sessionHasError = getSessionManager().sessionHasError;\n        if (onlySessionWithErrorMode && (isSeverityError || sessionHasError)) {\n          getSessionManager().sessionHasError = true;\n          resolvedCxSpan.text.cx_rum.session_context.hasError = true;\n        }\n        span[CX_MAPPED_SPAN] = resolvedCxSpan;\n      }\n    }\n  }\n  onStart() {}\n  shutdown() {\n    this.isActive = false;\n    return Promise.resolve();\n  }\n  forceFlush() {\n    return Promise.resolve(undefined);\n  }\n  _mapToCxSpan(span, session, prevSession, sessionHasRecording, onlySessionWithErrorMode) {\n    var _a, _b;\n    const {\n      sessionId,\n      sessionCreationDate\n    } = session || {};\n    const {\n      sessionId: prevSessionId,\n      sessionCreationDate: prevSessionCreationDate,\n      hasRecording: prevSessionHasRecording\n    } = prevSession || {};\n    const {\n      attributes,\n      startTime,\n      parentSpanId,\n      name,\n      endTime,\n      status,\n      duration,\n      kind\n    } = span;\n    const user_context = JSON.parse(attributes[CoralogixAttributes.USER_CONTEXT]);\n    const application_context = JSON.parse(attributes[CoralogixAttributes.APPLICATION_CONTEXT]);\n    const {\n      application,\n      version\n    } = application_context;\n    const eventType = attributes[CoralogixAttributes.EVENT_TYPE];\n    const eventTypeContext = this._getEventTypeContext(attributes, eventType, span);\n    const {\n      spanId,\n      traceId\n    } = span.spanContext();\n    const resourceAttributes = Object.assign(Object.assign({}, (_a = span.resource) === null || _a === void 0 ? void 0 : _a.attributes), {\n      'service.name': application\n    });\n    const labels = JSON.parse(attributes[CoralogixAttributes.CUSTOM_LABELS]);\n    const isErrorWithStacktrace = !!((_b = eventTypeContext === null || eventTypeContext === void 0 ? void 0 : eventTypeContext.error_context) === null || _b === void 0 ? void 0 : _b.original_stacktrace);\n    const version_metadata = {\n      app_name: application,\n      app_version: version\n    };\n    const severity = (attributes === null || attributes === void 0 ? void 0 : attributes[CoralogixAttributes.SEVERITY]) || CoralogixLogSeverity.Info;\n    let timestamp = attributes[CoralogixAttributes.TIMESTAMP] || getNowTime();\n    if (timestamp < sessionCreationDate) {\n      timestamp = getNowTime();\n    }\n    const cxSpan = {\n      version_metadata,\n      applicationName: application,\n      subsystemName: 'cx_rum',\n      isErrorWithStacktrace,\n      severity,\n      timestamp,\n      text: {\n        cx_rum: Object.assign(Object.assign({\n          platform: 'browser',\n          timestamp\n        }, eventTypeContext), {\n          browser_sdk: {\n            version: SDK_VERSION\n          },\n          version_metadata,\n          session_context: Object.assign(Object.assign(Object.assign(Object.assign({}, user_context), {\n            session_id: sessionId,\n            session_creation_date: sessionCreationDate,\n            prev_session: prevSessionId ? {\n              session_id: prevSessionId,\n              session_creation_date: prevSessionCreationDate,\n              hasRecording: prevSessionHasRecording\n            } : undefined,\n            hasRecording: sessionHasRecording,\n            user_agent: attributes[CoralogixAttributes.USER_AGENT]\n          }), parseUserAgent(attributes[CoralogixAttributes.USER_AGENT])), {\n            onlyWithErrorMode: onlySessionWithErrorMode\n          }),\n          page_context: span[CoralogixAttributes.PAGE_CONTEXT],\n          isNavigationEvent: !!span[CoralogixAttributes.IS_NAVIGATION_EVENT],\n          event_context: {\n            type: attributes[CoralogixAttributes.EVENT_TYPE],\n            source: attributes[CoralogixAttributes.SOURCE],\n            severity\n          },\n          labels,\n          spanId,\n          traceId,\n          environment: attributes[CoralogixAttributes.ENVIRONMENT] || ''\n        })\n      }\n    };\n    if (eventType === CoralogixEventType.NETWORK_REQUEST) {\n      cxSpan.instrumentation_data = {\n        otelSpan: {\n          spanId,\n          traceId,\n          parentSpanId,\n          name,\n          attributes: flattenAttributes(attributes),\n          startTime,\n          endTime,\n          status,\n          kind,\n          duration\n        },\n        otelResource: {\n          attributes: resourceAttributes\n        }\n      };\n    }\n    cxSpan.text.cx_rum.labels = this.resolveLabels(cxSpan.text.cx_rum);\n    return cxSpan;\n  }\n  _getEventTypeContext(spanAttributes, eventType, span) {\n    var _a, _b;\n    switch (eventType) {\n      case CoralogixEventType.ERROR:\n        {\n          const errorMessage = spanAttributes[CoralogixAttributes.ERROR.MESSAGE];\n          const stack = spanAttributes[CoralogixAttributes.ERROR.STACK];\n          let originalStackTrace = undefined;\n          if (stack) {\n            originalStackTrace = (_a = ErrorStackParser.parse({\n              stack: spanAttributes[CoralogixAttributes.ERROR.STACK],\n              message: errorMessage,\n              name: ''\n            })) === null || _a === void 0 ? void 0 : _a.map(({\n              fileName,\n              columnNumber,\n              lineNumber,\n              functionName\n            }) => ({\n              fileName,\n              columnNumber,\n              lineNumber,\n              functionName\n            }));\n          }\n          return {\n            error_context: {\n              error_type: spanAttributes[CoralogixAttributes.ERROR.TYPE],\n              error_message: errorMessage,\n              original_stacktrace: originalStackTrace\n            }\n          };\n        }\n      case CoralogixEventType.NETWORK_REQUEST:\n        {\n          const url = spanAttributes[OtelNetworkAttrs.URL];\n          const url_blueprint = applyUrlBluePrinters({\n            url,\n            blueprinters: (_b = this.sdkConfig.urlBlueprinters) === null || _b === void 0 ? void 0 : _b.networkUrlBlueprinters\n          });\n          return {\n            network_request_context: {\n              method: spanAttributes[OtelNetworkAttrs.METHOD],\n              status_code: spanAttributes[OtelNetworkAttrs.STATUS_CODE],\n              url,\n              url_blueprint,\n              fragments: getUrlFragments(url_blueprint),\n              host: spanAttributes[OtelNetworkAttrs.HOST],\n              schema: spanAttributes[OtelNetworkAttrs.SCHEME],\n              status_text: spanAttributes[OtelNetworkAttrs.STATUS_TEXT],\n              duration: hrTimeToMilliseconds(span === null || span === void 0 ? void 0 : span.duration),\n              response_content_length: spanAttributes[OtelNetworkAttrs.RESPONSE_CONTENT_LENGTH]\n            }\n          };\n        }\n      case CoralogixEventType.LOG:\n        {\n          if (spanAttributes[CoralogixAttributes.LOG]) {\n            const cxLog = JSON.parse(spanAttributes[CoralogixAttributes.LOG]);\n            return {\n              log_context: {\n                message: cxLog.message,\n                data: cxLog === null || cxLog === void 0 ? void 0 : cxLog.data\n              }\n            };\n          }\n          return {\n            log_context: {\n              message: ''\n            }\n          };\n        }\n      case CoralogixEventType.INTERNAL:\n        {\n          const internalContext = JSON.parse(spanAttributes[CoralogixAttributes.INTERNAL]);\n          const {\n            event,\n            data\n          } = internalContext || {};\n          return {\n            internal_context: {\n              event,\n              data\n            }\n          };\n        }\n      case CoralogixEventType.USER_INTERACTION:\n        {\n          return {\n            interaction_context: {\n              target_element: spanAttributes[CoralogixAttributes.TARGET_ELEMENT],\n              event_name: spanAttributes[CoralogixAttributes.INTERACTION_EVENT_NAME],\n              target_element_inner_text: spanAttributes[CoralogixAttributes.ELEMENT_INNER_TEXT],\n              target_element_inner_html: spanAttributes[CoralogixAttributes.ELEMENT_INNER_HTML],\n              element_id: spanAttributes[CoralogixAttributes.ELEMENT_ID],\n              element_classes: spanAttributes[CoralogixAttributes.ELEMENT_CLASSES],\n              target_element_type: spanAttributes[CoralogixAttributes.TARGET_ELEMENT_TYPE]\n            }\n          };\n        }\n      case CoralogixEventType.WEB_VITALS:\n        {\n          const webVitalsContext = JSON.parse(spanAttributes[WEB_VITALS_INSTRUMENTATION_NAME]);\n          return {\n            web_vitals_context: webVitalsContext\n          };\n        }\n      case CoralogixEventType.LONG_TASK:\n        {\n          const longTaskContext = JSON.parse(spanAttributes[LONG_TASK_PERFORMANCE_TYPE]);\n          return {\n            longtask_context: longTaskContext\n          };\n        }\n      case CoralogixEventType.RESOURCES:\n        {\n          const resourceContext = JSON.parse(spanAttributes[RESOURCES_INSTRUMENTATION_NAME]);\n          return {\n            resource_context: resourceContext\n          };\n        }\n    }\n    return {};\n  }\n  resolveLabels(cxRumEvent) {\n    var _a, _b;\n    let allLabels = cxRumEvent.labels;\n    const labelProviders = (_a = this.sdkConfig) === null || _a === void 0 ? void 0 : _a.labelProviders;\n    if (labelProviders === null || labelProviders === void 0 ? void 0 : labelProviders.length) {\n      const pageUrlLabelProviders = getInternalRumData(PAGE_URL_LABEL_PROVIDERS_KEY);\n      const networkUrlLabelProviders = getInternalRumData(NETWORK_URL_LABEL_PROVIDERS_KEY);\n      const networkRequestFragment = (_b = cxRumEvent.network_request_context) === null || _b === void 0 ? void 0 : _b.fragments;\n      const labelsFromProviders = Object.assign(Object.assign({}, this.getLabelsByLabelProviders(pageUrlLabelProviders, cxRumEvent, cxRumEvent.page_context.page_fragments)), networkRequestFragment ? this.getLabelsByLabelProviders(networkUrlLabelProviders, cxRumEvent, networkRequestFragment) : {});\n      allLabels = Object.assign(Object.assign({}, allLabels), labelsFromProviders);\n    }\n    return allLabels;\n  }\n  getLabelsByLabelProviders(labelProviders, cxRumEvent, url) {\n    let allLabels = {};\n    const cxRumEventClone = deepClone(cxRumEvent);\n    for (const labelProvider of labelProviders) {\n      allLabels = Object.assign(Object.assign({}, allLabels), labelProvider.providerFunc(url, cxRumEventClone));\n    }\n    return allLabels;\n  }\n}","map":{"version":3,"names":["CoralogixEventType","OtelNetworkAttrs","CoralogixAttributes","CX_MAPPED_SPAN","NETWORK_URL_LABEL_PROVIDERS_KEY","PAGE_URL_LABEL_PROVIDERS_KEY","CoralogixLogSeverity","SDK_VERSION","applyUrlBluePrinters","deepClone","flattenAttributes","getInternalRumData","getUrlFragments","hrTimeToMilliseconds","parseUserAgent","ErrorStackParser","LONG_TASK_PERFORMANCE_TYPE","RESOURCES_INSTRUMENTATION_NAME","WEB_VITALS_INSTRUMENTATION_NAME","getSdkConfig","getSessionManager","getSessionRecorder","shouldDropEvent","processBeforeSend","isProcessorShouldStop","getNowTime","CoralogixSpanMapProcessor","constructor","sdkConfig","isActive","onEnd","span","onlySessionWithErrorMode","getPrevSession","getSession","setSession","session","sessionHasRecording","_a","getSessionHasRecording","mappedCxSpan","_mapToCxSpan","text","cx_rum","resolvedCxSpan","isSeverityError","severity","Error","sessionHasError","session_context","hasError","onStart","shutdown","Promise","resolve","forceFlush","undefined","prevSession","sessionId","sessionCreationDate","prevSessionId","prevSessionCreationDate","hasRecording","prevSessionHasRecording","attributes","startTime","parentSpanId","name","endTime","status","duration","kind","user_context","JSON","parse","USER_CONTEXT","application_context","APPLICATION_CONTEXT","application","version","eventType","EVENT_TYPE","eventTypeContext","_getEventTypeContext","spanId","traceId","spanContext","resourceAttributes","Object","assign","resource","labels","CUSTOM_LABELS","isErrorWithStacktrace","_b","error_context","original_stacktrace","version_metadata","app_name","app_version","SEVERITY","Info","timestamp","TIMESTAMP","cxSpan","applicationName","subsystemName","platform","browser_sdk","session_id","session_creation_date","prev_session","user_agent","USER_AGENT","onlyWithErrorMode","page_context","PAGE_CONTEXT","isNavigationEvent","IS_NAVIGATION_EVENT","event_context","type","source","SOURCE","environment","ENVIRONMENT","NETWORK_REQUEST","instrumentation_data","otelSpan","otelResource","resolveLabels","spanAttributes","ERROR","errorMessage","MESSAGE","stack","STACK","originalStackTrace","message","map","fileName","columnNumber","lineNumber","functionName","error_type","TYPE","error_message","url","URL","url_blueprint","blueprinters","urlBlueprinters","networkUrlBlueprinters","network_request_context","method","METHOD","status_code","STATUS_CODE","fragments","host","HOST","schema","SCHEME","status_text","STATUS_TEXT","response_content_length","RESPONSE_CONTENT_LENGTH","LOG","cxLog","log_context","data","INTERNAL","internalContext","event","internal_context","USER_INTERACTION","interaction_context","target_element","TARGET_ELEMENT","event_name","INTERACTION_EVENT_NAME","target_element_inner_text","ELEMENT_INNER_TEXT","target_element_inner_html","ELEMENT_INNER_HTML","element_id","ELEMENT_ID","element_classes","ELEMENT_CLASSES","target_element_type","TARGET_ELEMENT_TYPE","WEB_VITALS","webVitalsContext","web_vitals_context","LONG_TASK","longTaskContext","longtask_context","RESOURCES","resourceContext","resource_context","cxRumEvent","allLabels","labelProviders","length","pageUrlLabelProviders","networkUrlLabelProviders","networkRequestFragment","labelsFromProviders","getLabelsByLabelProviders","page_fragments","cxRumEventClone","labelProvider","providerFunc"],"sources":["../../../../../libs/browser/src/processors/CoralogixSpanMapProcessor.ts"],"sourcesContent":[null],"mappings":"AACA,SAGEA,kBAAkB,EAUlBC,gBAAgB,QAMX,UAAU;AACjB,SACEC,mBAAmB,EACnBC,cAAc,EACdC,+BAA+B,EAC/BC,4BAA4B,QACvB,cAAc;AAErB,SAASC,oBAAoB,QAAQ,mBAAmB;AACxD,SAASC,WAAW,QAAQ,YAAY;AACxC,SACEC,oBAAoB,EACpBC,SAAS,EACTC,iBAAiB,EACjBC,kBAAkB,EAClBC,eAAe,EACfC,oBAAoB,EACpBC,cAAc,QACT,UAAU;AACjB,OAAOC,gBAAgC,MAAM,oBAAoB;AACjE,SACEC,0BAA0B,EAC1BC,8BAA8B,EAC9BC,+BAA+B,QAC1B,4CAA4C;AACnD,SACEC,YAAY,EACZC,iBAAiB,EACjBC,kBAAkB,QACb,YAAY;AACnB,SAASC,eAAe,QAAQ,oBAAoB;AACpD,SAASC,iBAAiB,QAAQ,gBAAgB;AAElD,SAASC,qBAAqB,QAAQ,oBAAoB;AAC1D,SAASC,UAAU,QAAQ,eAAe;AAE1C,OAAM,MAAOC,yBAAyB;EAAtCC,YAAA;IAGU,KAAAC,SAAS,GAA8BT,YAAY,EAAE;IAE7D,KAAAU,QAAQ,GAAY,IAAI;EA8Z1B;EA5ZEC,KAAKA,CAACC,IAAkB;;IACtB,IAAIP,qBAAqB,CAAC,IAAI,CAACK,QAAQ,CAAC,EAAE;MACxC;;IAGF,MAAM;MAAEG,wBAAwB;MAAEC,cAAc;MAAEC,UAAU;MAAEC;IAAU,CAAE,GACxEf,iBAAiB,EAAE;IAErB,MAAMgB,OAAO,GAAYF,UAAU,EAAE,IAAIC,UAAU,EAAE;IAErD,MAAME,mBAAmB,GACvB,CAAC,EAAC,CAAAC,EAAA,GAAAjB,kBAAkB,EAAE,cAAAiB,EAAA,uBAAAA,EAAA,CAAEC,sBAAsB,EAAE;IAElD,MAAMC,YAAY,GAAW,IAAI,CAACC,YAAY,CAC5CV,IAAI,EACJK,OAAO,EACPH,cAAc,EAAE,EAChBI,mBAAmB,EACnBL,wBAAwB,CACzB;IAED,IAAI,CAACV,eAAe,CAACkB,YAAY,CAACE,IAAI,CAACC,MAAM,EAAE,IAAI,CAACf,SAAS,CAAC,EAAE;MAC9D,MAAMgB,cAAc,GAAGrB,iBAAiB,CAACiB,YAAY,EAAE,IAAI,CAACZ,SAAS,CAAC;MAEtE,IAAIgB,cAAc,EAAE;QAClB,MAAMC,eAAe,GACnBD,cAAc,CAACE,QAAQ,KAAKxC,oBAAoB,CAACyC,KAAK;QAExD,MAAMC,eAAe,GAAG5B,iBAAiB,EAAE,CAAC4B,eAAe;QAE3D,IAAIhB,wBAAwB,KAAKa,eAAe,IAAIG,eAAe,CAAC,EAAE;UACpE5B,iBAAiB,EAAE,CAAC4B,eAAe,GAAG,IAAI;UAC1CJ,cAAc,CAACF,IAAI,CAACC,MAAM,CAACM,eAAe,CAACC,QAAQ,GAAG,IAAI;;QAG5DnB,IAAI,CAAC5B,cAAc,CAAC,GAAGyC,cAAc;;;EAG3C;EAEAO,OAAOA,CAAA,GAAU;EAEjBC,QAAQA,CAAA;IACN,IAAI,CAACvB,QAAQ,GAAG,KAAK;IACrB,OAAOwB,OAAO,CAACC,OAAO,EAAE;EAC1B;EAEAC,UAAUA,CAAA;IACR,OAAOF,OAAO,CAACC,OAAO,CAACE,SAAS,CAAC;EACnC;EAEQf,YAAYA,CAClBV,IAAkB,EAClBK,OAAgB,EAChBqB,WAAwB,EACxBpB,mBAA4B,EAC5BL,wBAAiC;;IAEjC,MAAM;MAAE0B,SAAS;MAAEC;IAAmB,CAAE,GAAGvB,OAAO,IAAI,EAAE;IACxD,MAAM;MACJsB,SAAS,EAAEE,aAAa;MACxBD,mBAAmB,EAAEE,uBAAuB;MAC5CC,YAAY,EAAEC;IAAuB,CACtC,GAAGN,WAAW,IAAI,EAAE;IACrB,MAAM;MACJO,UAAU;MACVC,SAAS;MACTC,YAAY;MACZC,IAAI;MACJC,OAAO;MACPC,MAAM;MACNC,QAAQ;MACRC;IAAI,CACL,GAAGxC,IAAI;IAER,MAAMyC,YAAY,GAAsBC,IAAI,CAACC,KAAK,CAChDV,UAAU,CAAC9D,mBAAmB,CAACyE,YAAY,CAAW,CAClC;IAEtB,MAAMC,mBAAmB,GAA6BH,IAAI,CAACC,KAAK,CAC9DV,UAAU,CAAC9D,mBAAmB,CAAC2E,mBAAmB,CAAW,CAClC;IAE7B,MAAM;MAAEC,WAAW;MAAEC;IAAO,CAAE,GAAGH,mBAAmB;IAEpD,MAAMI,SAAS,GACbhB,UAAU,CAAC9D,mBAAmB,CAAC+E,UAAU,CAAC;IAE5C,MAAMC,gBAAgB,GAAG,IAAI,CAACC,oBAAoB,CAChDnB,UAAU,EACVgB,SAAS,EACTjD,IAAI,CACL;IAED,MAAM;MAAEqD,MAAM;MAAEC;IAAO,CAAE,GAAGtD,IAAI,CAACuD,WAAW,EAAE;IAC9C,MAAMC,kBAAkB,GAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACnB,CAAAnD,EAAA,GAAAP,IAAI,CAAC2D,QAAQ,cAAApD,EAAA,uBAAAA,EAAA,CAAE0B,UAAU;MAC5B,cAAc,EAAEc;IAAW,EAC5B;IAED,MAAMa,MAAM,GAAGlB,IAAI,CAACC,KAAK,CACvBV,UAAU,CAAC9D,mBAAmB,CAAC0F,aAAa,CAAW,CACxD;IAED,MAAMC,qBAAqB,GACzB,CAAC,EAAC,CAAAC,EAAA,GAAAZ,gBAAgB,aAAhBA,gBAAgB,uBAAhBA,gBAAgB,CAAEa,aAAa,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,mBAAmB;IAExD,MAAMC,gBAAgB,GAAG;MACvBC,QAAQ,EAAEpB,WAAW;MACrBqB,WAAW,EAAEpB;KACd;IAED,MAAMjC,QAAQ,GACZ,CAACkB,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAG9D,mBAAmB,CAACkG,QAAQ,CAA0B,KACpE9F,oBAAoB,CAAC+F,IAAI;IAE3B,IAAIC,SAAS,GACVtC,UAAU,CAAC9D,mBAAmB,CAACqG,SAAS,CAAY,IAAI9E,UAAU,EAAE;IAEvE,IAAI6E,SAAS,GAAG3C,mBAAmB,EAAE;MACnC2C,SAAS,GAAG7E,UAAU,EAAE;;IAG1B,MAAM+E,MAAM,GAAW;MACrBP,gBAAgB;MAChBQ,eAAe,EAAE3B,WAAW;MAC5B4B,aAAa,EAAE,QAAQ;MACvBb,qBAAqB;MACrB/C,QAAQ;MACRwD,SAAS;MACT5D,IAAI,EAAE;QACJC,MAAM,EAAA6C,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA;UACJkB,QAAQ,EAAE,SAAS;UACnBL;QAAS,GACNpB,gBAAgB;UACnB0B,WAAW,EAAE;YACX7B,OAAO,EAAExE;WACV;UACD0F,gBAAgB;UAChBhD,eAAe,EAAAuC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACVjB,YAAY;YACfqC,UAAU,EAAEnD,SAAS;YACrBoD,qBAAqB,EAAEnD,mBAAmB;YAC1CoD,YAAY,EAAEnD,aAAa,GACvB;cACEiD,UAAU,EAAEjD,aAAa;cACzBkD,qBAAqB,EAAEjD,uBAAuB;cAC9CC,YAAY,EAAEC;aACf,GACDP,SAAS;YACbM,YAAY,EAAEzB,mBAAmB;YACjC2E,UAAU,EAAEhD,UAAU,CAAC9D,mBAAmB,CAAC+G,UAAU;UAAW,IAC7DnG,cAAc,CACfkD,UAAU,CAAC9D,mBAAmB,CAAC+G,UAAU,CAAW,CACrD;YACDC,iBAAiB,EAAElF;UAAwB;UAE7CmF,YAAY,EAAEpF,IAAI,CAAC7B,mBAAmB,CAACkH,YAAY,CAAC;UACpDC,iBAAiB,EAAE,CAAC,CAACtF,IAAI,CAAC7B,mBAAmB,CAACoH,mBAAmB,CAAC;UAClEC,aAAa,EAAE;YACbC,IAAI,EAAExD,UAAU,CACd9D,mBAAmB,CAAC+E,UAAU,CACT;YACvBwC,MAAM,EAAEzD,UAAU,CAAC9D,mBAAmB,CAACwH,MAAM,CAAgB;YAC7D5E;WACD;UACD6C,MAAM;UACNP,MAAM;UACNC,OAAO;UACPsC,WAAW,EACR3D,UAAU,CAAC9D,mBAAmB,CAAC0H,WAAW,CAAY,IAAI;QAAE;;KAGpE;IAED,IAAI5C,SAAS,KAAKhF,kBAAkB,CAAC6H,eAAe,EAAE;MACpDrB,MAAM,CAACsB,oBAAoB,GAAG;QAC5BC,QAAQ,EAAE;UACR3C,MAAM;UACNC,OAAO;UACPnB,YAAY;UACZC,IAAI;UACJH,UAAU,EAAEtD,iBAAiB,CAACsD,UAAU,CAAC;UACzCC,SAAS;UACTG,OAAO;UACPC,MAAM;UACNE,IAAI;UACJD;SACD;QACD0D,YAAY,EAAE;UACZhE,UAAU,EAAEuB;;OAEf;;IAGHiB,MAAM,CAAC9D,IAAI,CAACC,MAAM,CAACgD,MAAM,GAAG,IAAI,CAACsC,aAAa,CAACzB,MAAM,CAAC9D,IAAI,CAACC,MAAM,CAAC;IAClE,OAAO6D,MAAM;EACf;EAEQrB,oBAAoBA,CAC1B+C,cAA0B,EAC1BlD,SAAqC,EACrCjD,IAAkB;;IAElB,QAAQiD,SAAS;MACf,KAAKhF,kBAAkB,CAACmI,KAAK;QAAE;UAC7B,MAAMC,YAAY,GAAGF,cAAc,CACjChI,mBAAmB,CAACiI,KAAK,CAACE,OAAO,CACxB;UAEX,MAAMC,KAAK,GAAGJ,cAAc,CAAChI,mBAAmB,CAACiI,KAAK,CAACI,KAAK,CAAW;UACvE,IAAIC,kBAAkB,GAAsChF,SAAS;UAErE,IAAI8E,KAAK,EAAE;YACTE,kBAAkB,GAAG,CAAAlG,EAAA,GAAAvB,gBAAgB,CAAC2D,KAAK,CAAC;cAC1C4D,KAAK,EAAEJ,cAAc,CAAChI,mBAAmB,CAACiI,KAAK,CAACI,KAAK,CAAW;cAChEE,OAAO,EAAEL,YAAY;cACrBjE,IAAI,EAAE;aACP,CAAC,cAAA7B,EAAA,uBAAAA,EAAA,CAAEoG,GAAG,CAAC,CAAC;cAAEC,QAAQ;cAAEC,YAAY;cAAEC,UAAU;cAAEC;YAAY,CAAE,MAAM;cACjEH,QAAQ;cACRC,YAAY;cACZC,UAAU;cACVC;aACD,CAAC,CAAC;;UAGL,OAAO;YACL/C,aAAa,EAAE;cACbgD,UAAU,EAAEb,cAAc,CACxBhI,mBAAmB,CAACiI,KAAK,CAACa,IAAI,CACrB;cACXC,aAAa,EAAEb,YAAY;cAC3BpC,mBAAmB,EAAEwC;;WAExB;;MAEH,KAAKxI,kBAAkB,CAAC6H,eAAe;QAAE;UACvC,MAAMqB,GAAG,GAAGhB,cAAc,CAACjI,gBAAgB,CAACkJ,GAAG,CAAW;UAC1D,MAAMC,aAAa,GAAG5I,oBAAoB,CAAC;YACzC0I,GAAG;YACHG,YAAY,EAAE,CAAAvD,EAAA,OAAI,CAAClE,SAAS,CAAC0H,eAAe,cAAAxD,EAAA,uBAAAA,EAAA,CAAEyD;WAC/C,CAAC;UAEF,OAAO;YACLC,uBAAuB,EAAE;cACvBC,MAAM,EAAEvB,cAAc,CAACjI,gBAAgB,CAACyJ,MAAM,CAAW;cACzDC,WAAW,EAAEzB,cAAc,CAACjI,gBAAgB,CAAC2J,WAAW,CAAW;cACnEV,GAAG;cACHE,aAAa;cACbS,SAAS,EAAEjJ,eAAe,CAACwI,aAAa,CAAC;cACzCU,IAAI,EAAE5B,cAAc,CAACjI,gBAAgB,CAAC8J,IAAI,CAAW;cACrDC,MAAM,EAAE9B,cAAc,CAACjI,gBAAgB,CAACgK,MAAM,CAAW;cACzDC,WAAW,EAAEhC,cAAc,CAACjI,gBAAgB,CAACkK,WAAW,CAAW;cACnE7F,QAAQ,EAAEzD,oBAAoB,CAACkB,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEuC,QAAQ,CAAC;cAC9C8F,uBAAuB,EAAElC,cAAc,CACrCjI,gBAAgB,CAACoK,uBAAuB;;WAG7C;;MAEH,KAAKrK,kBAAkB,CAACsK,GAAG;QAAE;UAC3B,IAAIpC,cAAc,CAAChI,mBAAmB,CAACoK,GAAG,CAAC,EAAE;YAC3C,MAAMC,KAAK,GAAG9F,IAAI,CAACC,KAAK,CACtBwD,cAAc,CAAChI,mBAAmB,CAACoK,GAAG,CAAW,CACpC;YAEf,OAAO;cACLE,WAAW,EAAE;gBACX/B,OAAO,EAAE8B,KAAK,CAAC9B,OAAO;gBACtBgC,IAAI,EAAEF,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEE;;aAEhB;;UAGH,OAAO;YACLD,WAAW,EAAE;cACX/B,OAAO,EAAE;;WAEZ;;MAEH,KAAKzI,kBAAkB,CAAC0K,QAAQ;QAAE;UAChC,MAAMC,eAAe,GAAoBlG,IAAI,CAACC,KAAK,CACjDwD,cAAc,CAAChI,mBAAmB,CAACwK,QAAQ,CAAW,CACpC;UACpB,MAAM;YAAEE,KAAK;YAAEH;UAAI,CAAE,GAAGE,eAAe,IAAI,EAAE;UAE7C,OAAO;YACLE,gBAAgB,EAAE;cAChBD,KAAK;cACLH;;WAEH;;MAEH,KAAKzK,kBAAkB,CAAC8K,gBAAgB;QAAE;UACxC,OAAO;YACLC,mBAAmB,EAAE;cACnBC,cAAc,EAAE9C,cAAc,CAC5BhI,mBAAmB,CAAC+K,cAAc,CACzB;cACXC,UAAU,EAAEhD,cAAc,CACxBhI,mBAAmB,CAACiL,sBAAsB,CACjC;cACXC,yBAAyB,EAAElD,cAAc,CACvChI,mBAAmB,CAACmL,kBAAkB,CAC7B;cACXC,yBAAyB,EAAEpD,cAAc,CACvChI,mBAAmB,CAACqL,kBAAkB,CAC7B;cACXC,UAAU,EAAEtD,cAAc,CACxBhI,mBAAmB,CAACuL,UAAU,CACrB;cACXC,eAAe,EAAExD,cAAc,CAC7BhI,mBAAmB,CAACyL,eAAe,CAC1B;cACXC,mBAAmB,EAAE1D,cAAc,CACjChI,mBAAmB,CAAC2L,mBAAmB;;WAG5C;;MAEH,KAAK7L,kBAAkB,CAAC8L,UAAU;QAAE;UAClC,MAAMC,gBAAgB,GAAqBtH,IAAI,CAACC,KAAK,CACnDwD,cAAc,CAAChH,+BAA+B,CAAW,CAC1D;UAED,OAAO;YACL8K,kBAAkB,EAAED;WACrB;;MAGH,KAAK/L,kBAAkB,CAACiM,SAAS;QAAE;UACjC,MAAMC,eAAe,GAAoBzH,IAAI,CAACC,KAAK,CACjDwD,cAAc,CAAClH,0BAA0B,CAAW,CACrD;UAED,OAAO;YACLmL,gBAAgB,EAAED;WACnB;;MAGH,KAAKlM,kBAAkB,CAACoM,SAAS;QAAE;UACjC,MAAMC,eAAe,GAAoB5H,IAAI,CAACC,KAAK,CACjDwD,cAAc,CAACjH,8BAA8B,CAAW,CACzD;UAED,OAAO;YACLqL,gBAAgB,EAAED;WACnB;;;IAIL,OAAO,EAAE;EACX;EAEQpE,aAAaA,CAACsE,UAAsB;;IAC1C,IAAIC,SAAS,GAAuBD,UAAU,CAAC5G,MAAM;IAErD,MAAM8G,cAAc,GAAG,CAAAnK,EAAA,OAAI,CAACV,SAAS,cAAAU,EAAA,uBAAAA,EAAA,CAAEmK,cAAc;IAErD,IAAIA,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEC,MAAM,EAAE;MAC1B,MAAMC,qBAAqB,GAAoBhM,kBAAkB,CAC/DN,4BAA4B,CAC7B;MACD,MAAMuM,wBAAwB,GAAoBjM,kBAAkB,CAClEP,+BAA+B,CAChC;MAED,MAAMyM,sBAAsB,GAC1B,CAAA/G,EAAA,GAAAyG,UAAU,CAAC/C,uBAAuB,cAAA1D,EAAA,uBAAAA,EAAA,CAAE+D,SAAS;MAE/C,MAAMiD,mBAAmB,GAAAtH,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACpB,IAAI,CAACsH,yBAAyB,CAC/BJ,qBAAqB,EACrBJ,UAAU,EACVA,UAAU,CAACpF,YAAY,CAAC6F,cAAc,CACvC,GACGH,sBAAsB,GACtB,IAAI,CAACE,yBAAyB,CAC5BH,wBAAwB,EACxBL,UAAU,EACVM,sBAAsB,CACvB,GACD,EAAG,CACR;MAEDL,SAAS,GAAAhH,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACJ+G,SAAS,GACTM,mBAAmB,CACvB;;IAGH,OAAON,SAAS;EAClB;EAEQO,yBAAyBA,CAC/BN,cAA+B,EAC/BF,UAAsB,EACtBrD,GAAW;IAEX,IAAIsD,SAAS,GAAuB,EAAE;IAEtC,MAAMS,eAAe,GAAGxM,SAAS,CAAC8L,UAAU,CAAC;IAE7C,KAAK,MAAMW,aAAa,IAAIT,cAAc,EAAE;MAC1CD,SAAS,GAAAhH,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACJ+G,SAAS,GACTU,aAAa,CAACC,YAAY,CAACjE,GAAG,EAAE+D,eAAe,CAAC,CACpD;;IAGH,OAAOT,SAAS;EAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}