{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { CoralogixAttributes, CX_MAPPED_SPAN } from '../constants';\nimport { CoralogixEventType } from '../types';\nimport { getSessionRecorder, getSnapshotManager } from '../helpers';\nimport { CoralogixLogSeverity } from '../types-external';\nimport { isProcessorShouldStop } from './processor.helper';\nimport { getNowTime, millisecondsPerMinute } from '../utils/time';\nexport class CoralogixSnapshotSpanProcessor {\n  constructor() {\n    this.isActive = true;\n  }\n  forceFlush() {\n    return Promise.resolve();\n  }\n  onEnd(span) {\n    if (isProcessorShouldStop(this.isActive) || !span[CX_MAPPED_SPAN]) {\n      return;\n    }\n    const cxSpan = span[CX_MAPPED_SPAN];\n    if (this.isSnapshotPrepared(span)) {\n      this.createSnapshot(cxSpan);\n    } else {\n      cxSpan.text.cx_rum.isSnapshotEvent = false;\n    }\n  }\n  onStart(span, parentContext) {}\n  shutdown() {\n    this.isActive = false;\n    return Promise.resolve();\n  }\n  createSnapshot(cxSpan) {\n    const _a = getSnapshotManager().currentSnapshot,\n      {\n        timestamp\n      } = _a,\n      snapshotContext = __rest(_a, [\"timestamp\"]);\n    cxSpan.text.cx_rum.isSnapshotEvent = true;\n    cxSpan.text.cx_rum.snapshot_context = snapshotContext;\n  }\n  isSnapshotPrepared(span) {\n    var _a;\n    const {\n      [CoralogixAttributes.TIMESTAMP]: spanTimestamp,\n      [CoralogixAttributes.EVENT_TYPE]: spanType,\n      [CoralogixAttributes.SEVERITY]: spanSeverity\n    } = span.attributes;\n    let shouldCreateSnapshot = false;\n    const {\n      fragmentsState,\n      updateSnapshot,\n      currentSnapshot,\n      isSnapshotSentDueToRecording\n    } = getSnapshotManager();\n    const {\n      timestamp: snapshotTimestamp,\n      actionCount,\n      errorCount\n    } = currentSnapshot;\n    const pageContext = span[CoralogixAttributes.PAGE_CONTEXT];\n    if (pageContext && !fragmentsState.has(pageContext.page_fragments)) {\n      fragmentsState.add(pageContext.page_fragments);\n      updateSnapshot({\n        timestamp: getNowTime(),\n        viewCount: fragmentsState.size\n      });\n      shouldCreateSnapshot = true;\n    }\n    if (spanSeverity === CoralogixLogSeverity.Error) {\n      updateSnapshot({\n        timestamp: getNowTime(),\n        errorCount: errorCount + 1\n      });\n      shouldCreateSnapshot = true;\n    }\n    if (((_a = getSessionRecorder()) === null || _a === void 0 ? void 0 : _a.getSessionHasRecording()) && !isSnapshotSentDueToRecording) {\n      updateSnapshot({\n        timestamp: getNowTime(),\n        hasRecording: true\n      });\n      getSnapshotManager().isSnapshotSentDueToRecording = true;\n      shouldCreateSnapshot = true;\n    }\n    if (spanType === CoralogixEventType.DOM) {\n      updateSnapshot({\n        timestamp: getNowTime()\n      });\n      shouldCreateSnapshot = true;\n    }\n    if (spanTimestamp - snapshotTimestamp >= millisecondsPerMinute) {\n      updateSnapshot({\n        timestamp: getNowTime()\n      });\n      shouldCreateSnapshot = true;\n    }\n    if (spanType === CoralogixEventType.USER_INTERACTION) {\n      updateSnapshot({\n        actionCount: actionCount + 1\n      });\n    }\n    return shouldCreateSnapshot;\n  }\n}","map":{"version":3,"names":["CoralogixAttributes","CX_MAPPED_SPAN","CoralogixEventType","getSessionRecorder","getSnapshotManager","CoralogixLogSeverity","isProcessorShouldStop","getNowTime","millisecondsPerMinute","CoralogixSnapshotSpanProcessor","constructor","isActive","forceFlush","Promise","resolve","onEnd","span","cxSpan","isSnapshotPrepared","createSnapshot","text","cx_rum","isSnapshotEvent","onStart","parentContext","shutdown","_a","currentSnapshot","timestamp","snapshotContext","__rest","snapshot_context","TIMESTAMP","spanTimestamp","EVENT_TYPE","spanType","SEVERITY","spanSeverity","attributes","shouldCreateSnapshot","fragmentsState","updateSnapshot","isSnapshotSentDueToRecording","snapshotTimestamp","actionCount","errorCount","pageContext","PAGE_CONTEXT","has","page_fragments","add","viewCount","size","Error","getSessionHasRecording","hasRecording","DOM","USER_INTERACTION"],"sources":["../../../../../libs/browser/src/processors/CoralogixSnapshotSpanProcessor.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}