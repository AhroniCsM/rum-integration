{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { isNil } from './general';\nimport { coerceArray } from './array';\nexport function isObject(value) {\n  return typeof value === 'object';\n}\n/**\n * Creates an object composed of the properties of the input object, excluding the specified paths.\n *\n * @param object The source object from which to omit properties.\n * @param paths An array or a single path (including nested paths) to omit from the source object.\n * @returns Returns a new object with the specified paths omitted.\n */\nexport function omit(object = {}, ...paths) {\n  if (isNil(object)) return {};\n  const omitter = (source, pathArray) => {\n    const [firstKey, ...remainingKeys] = pathArray;\n    if (!source.hasOwnProperty(firstKey)) return source;\n    if (!remainingKeys.length) {\n      const _a = source,\n        _b = firstKey,\n        _ = _a[_b],\n        rest = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n      return rest;\n    }\n    return Object.assign(Object.assign({}, source), {\n      [firstKey]: omitter(source[firstKey], remainingKeys)\n    });\n  };\n  //@ts-ignore\n  return coerceArray(paths).reduce((result, path) => omitter(result, path.split('.')), object);\n}\n/**\n * Creates an object composed of the picked object properties, including support for nested paths.\n *\n * @param object The source object from which to pick properties.\n * @param keys An array or a single key (including nested paths) to pick from the source object.\n * @returns Returns a new object with properties picked from the source object.\n */\nexport function pick(object = {}, ...keys) {\n  const picker = (source, pathArray) => {\n    const [firstKey, ...remainingKeys] = pathArray;\n    if (!source.hasOwnProperty(firstKey)) return undefined;\n    if (!remainingKeys.length) {\n      return {\n        [firstKey]: source[firstKey]\n      };\n    }\n    const nestedValue = picker(source[firstKey], remainingKeys);\n    if (nestedValue === undefined) {\n      return undefined;\n    }\n    return {\n      [firstKey]: nestedValue\n    };\n  };\n  let result = {};\n  coerceArray(keys).forEach(key => {\n    result = Object.assign(Object.assign({}, result), picker(object, key.split('.')));\n  });\n  return result;\n}\n/**\n * Checks if a Set, Array, Map, or Object is empty.\n *\n * @param value - The value to check.\n * @returns Returns true if the value is an empty Set, Map, Array, String or Object, else false.\n */\nexport function isEmpty(value) {\n  if (isNil(value)) return true;\n  if (value instanceof Set || value instanceof Map) {\n    return value.size === 0;\n  }\n  if (Array.isArray(value) || typeof value === 'string') {\n    return value.length === 0;\n  }\n  if (isObject(value)) {\n    return Object.keys(value).length === 0;\n  }\n  return false;\n}\n/**\n * Checks if a Set, Array, Map, or Object is not empty.\n *\n * @param value - The value to check.\n * @returns Returns false if the value is an empty Set, Map, Array, String or Object, else true.\n */\nexport function isNotEmpty(value) {\n  return !isEmpty(value);\n}","map":{"version":3,"names":["isNil","coerceArray","isObject","value","omit","object","paths","omitter","source","pathArray","firstKey","remainingKeys","hasOwnProperty","length","_a","_b","_","rest","__rest","Object","assign","reduce","result","path","split","pick","keys","picker","undefined","nestedValue","forEach","key","isEmpty","Set","Map","size","Array","isArray","isNotEmpty"],"sources":["../../../../../libs/browser/src/utils/object.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}