{"ast":null,"code":"import { SessionRecorder } from './sessionRecorder';\nimport { getSdkConfig, getSessionRecorder, getSnapshotManager } from '../helpers';\nimport { PREV_SESSION_KEY, SESSION_EXPIRATION_TIME, SESSION_IDLE_TIME, SESSION_KEY, SESSION_MANAGER_KEY } from './session.consts';\nimport { isSamplingOn } from './session.helper';\nimport { generateUUID } from '../utils';\nimport { SessionIdle } from './session-idle';\nimport { getNowTime } from '../utils/time';\nexport class SessionManager extends SessionIdle {\n  constructor(recordConfig) {\n    super({\n      timeoutDelay: SESSION_IDLE_TIME,\n      onIdle: () => this.clearSessionWhenIdle(),\n      onActive: () => this.setSession(true)\n    });\n    this._sessionConfig = getSdkConfig().sessionConfig;\n    this._sessionHasError = false;\n    this._cachedLogsSent = false;\n    this.getPrevSession = () => {\n      return JSON.parse(window.sessionStorage.getItem(PREV_SESSION_KEY));\n    };\n    this.getSession = () => {\n      const storedSession = JSON.parse(window.sessionStorage.getItem(SESSION_KEY));\n      const now = getNowTime();\n      let session;\n      if (storedSession) {\n        if (storedSession.sessionExpirationDate > now) {\n          session = storedSession;\n        } else {\n          this.clearSessionWhenIdle();\n          session = this.setSession(true);\n        }\n      }\n      return session;\n    };\n    this.setSession = (afterIdle = false, sessionId) => {\n      var _a, _b;\n      const now = getNowTime();\n      const session = {\n        sessionId: sessionId || generateUUID(),\n        sessionCreationDate: now,\n        sessionExpirationDate: now + SESSION_EXPIRATION_TIME\n      };\n      this.activeSession = session;\n      window.sessionStorage.setItem(SESSION_KEY, JSON.stringify(session));\n      const sessionRecorder = getSessionRecorder();\n      const shouldStartRecordingAfterIdle = afterIdle && !!(sessionRecorder === null || sessionRecorder === void 0 ? void 0 : sessionRecorder.recordingStopDueToTimeout) && !!((_a = this.sessionRecorderConfig) === null || _a === void 0 ? void 0 : _a.enable);\n      if (shouldStartRecordingAfterIdle || (sessionRecorder === null || sessionRecorder === void 0 ? void 0 : sessionRecorder.getIsAutoStartRecording())) {\n        (_b = this.sessionRecorder) === null || _b === void 0 ? void 0 : _b.startRecording();\n      }\n      return session;\n    };\n    window[SESSION_MANAGER_KEY] = this;\n    this.sessionRecorderConfig = recordConfig;\n    if (recordConfig === null || recordConfig === void 0 ? void 0 : recordConfig.enable) {\n      const recordingSamplingEnabled = isSamplingOn(recordConfig.sessionRecordingSampleRate);\n      if (recordingSamplingEnabled) {\n        this.sessionRecorder = new SessionRecorder(this, recordConfig);\n      } else {\n        if (getSdkConfig().debug) {\n          console.debug('Coralogix Browser SDK - Session recording is disabled');\n        }\n      }\n    }\n  }\n  get currentPageFragment() {\n    return this._currentPageFragment;\n  }\n  set currentPageFragment(value) {\n    // Should not set currentPageFragment when idle even if rum events are sent before idle(like network requests)\n    this._currentPageFragment = this.isIdleActive ? undefined : value;\n  }\n  get sessionConfig() {\n    return this._sessionConfig;\n  }\n  get onlySessionWithErrorMode() {\n    return this._sessionConfig.onlyWithErrorConfig.enable;\n  }\n  get maxRumEventsForSessionWithError() {\n    return this._sessionConfig.onlyWithErrorConfig.maxRumEvents || 0;\n  }\n  get maxRecordTimeForSessionWithError() {\n    return this._sessionConfig.onlyWithErrorConfig.maxRecordTime || 0;\n  }\n  get instrumentationsToSend() {\n    return this._sessionConfig.onlyWithErrorConfig.instrumentationsToSend;\n  }\n  get cachedLogsSent() {\n    return this._cachedLogsSent;\n  }\n  get sessionHasError() {\n    return this._sessionHasError;\n  }\n  set sessionHasError(value) {\n    this._sessionHasError = value;\n  }\n  set cachedLogsSent(val) {\n    this._cachedLogsSent = val;\n  }\n  getSessionKey() {\n    return SESSION_KEY;\n  }\n  getActiveSession() {\n    return this.activeSession;\n  }\n  start() {\n    this.startIdleListener();\n    this.clearPrevSession();\n    this.setSession();\n  }\n  stop() {\n    this.stopIdleListener();\n  }\n  clearSessionWhenIdle() {\n    var _a;\n    if ((_a = this.sessionRecorder) === null || _a === void 0 ? void 0 : _a.getSessionHasRecording()) {\n      this.sessionRecorder.recordingStopDueToTimeout = true;\n    }\n    this.clearSession();\n  }\n  clearPrevSession() {\n    window.sessionStorage.removeItem(PREV_SESSION_KEY);\n  }\n  clearSession() {\n    var _a, _b, _c;\n    window.sessionStorage.setItem(PREV_SESSION_KEY, JSON.stringify(Object.assign(Object.assign({}, this.activeSession), {\n      hasRecording: (_a = this.sessionRecorder) === null || _a === void 0 ? void 0 : _a.getSessionHasRecording()\n    })));\n    this.clearSessionWithErrorMode();\n    (_b = getSnapshotManager()) === null || _b === void 0 ? void 0 : _b.resetSnapshot();\n    this._currentPageFragment = undefined;\n    (_c = this.sessionRecorder) === null || _c === void 0 ? void 0 : _c.stopRecording();\n    window.sessionStorage.removeItem(SESSION_KEY);\n  }\n  clearSessionWithErrorMode() {\n    this.sessionHasError = false;\n    this.cachedLogsSent = false;\n  }\n}","map":{"version":3,"names":["SessionRecorder","getSdkConfig","getSessionRecorder","getSnapshotManager","PREV_SESSION_KEY","SESSION_EXPIRATION_TIME","SESSION_IDLE_TIME","SESSION_KEY","SESSION_MANAGER_KEY","isSamplingOn","generateUUID","SessionIdle","getNowTime","SessionManager","constructor","recordConfig","timeoutDelay","onIdle","clearSessionWhenIdle","onActive","setSession","_sessionConfig","sessionConfig","_sessionHasError","_cachedLogsSent","getPrevSession","JSON","parse","window","sessionStorage","getItem","getSession","storedSession","now","session","sessionExpirationDate","afterIdle","sessionId","sessionCreationDate","activeSession","setItem","stringify","sessionRecorder","shouldStartRecordingAfterIdle","recordingStopDueToTimeout","_a","sessionRecorderConfig","enable","getIsAutoStartRecording","_b","startRecording","recordingSamplingEnabled","sessionRecordingSampleRate","debug","console","currentPageFragment","_currentPageFragment","value","isIdleActive","undefined","onlySessionWithErrorMode","onlyWithErrorConfig","maxRumEventsForSessionWithError","maxRumEvents","maxRecordTimeForSessionWithError","maxRecordTime","instrumentationsToSend","cachedLogsSent","sessionHasError","val","getSessionKey","getActiveSession","start","startIdleListener","clearPrevSession","stop","stopIdleListener","getSessionHasRecording","clearSession","removeItem","Object","assign","hasRecording","clearSessionWithErrorMode","resetSnapshot","_c","stopRecording"],"sources":["../../../../../libs/browser/src/session/sessionManager.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}