{"ast":null,"code":"// @ts-nocheck\nexport function getWorkerString() {\n  const MAX_CHUNK_SIZE = 1024 * 1024; //1MB\n  const ERROR_MESSAGE = 'Coralogix Browser SDK - Error from session recording worker:\\n';\n  try {\n    importScripts('https://cdnjs.cloudflare.com/ajax/libs/pako/2.1.0/pako_deflate.es5.min.js');\n  } catch (err) {\n    console.warn(ERROR_MESSAGE, err);\n    self.postMessage({\n      event: 'stopRecording'\n    });\n    return;\n  }\n  self.onmessage = ({\n    data\n  }) => {\n    const recordsData = omitSquareBrackets(JSON.stringify(data.records));\n    const sessionId = data.sessionId;\n    const sessionCreationDate = data.sessionCreationDate;\n    const gzipData = this.pako.gzip(recordsData);\n    const gzipSize = gzipData.byteLength;\n    if (gzipSize >= MAX_CHUNK_SIZE) {\n      const totalChunks = Math.ceil(gzipSize / MAX_CHUNK_SIZE);\n      for (let i = 0; i < totalChunks; i++) {\n        const start = i * MAX_CHUNK_SIZE;\n        const end = (i + 1) * MAX_CHUNK_SIZE;\n        const chunk = gzipData.slice(start, end);\n        createBlobAndSend(sessionId, sessionCreationDate, chunk, i, totalChunks - 1, 'splitRecordData');\n      }\n    } else {\n      createBlobAndSend(sessionId, sessionCreationDate, gzipData);\n    }\n  };\n  self.onerror = err => {\n    console.warn(ERROR_MESSAGE, err);\n    self.postMessage({\n      event: 'stopRecording'\n    });\n  };\n  function omitSquareBrackets(json) {\n    return json.slice(1, -1);\n  }\n  function createBlobAndSend(sessionId, sessionCreationDate, gzipData, chunkIndex, totalChunks, event = 'sendRecordData') {\n    const blob = new Blob([gzipData], {\n      type: 'application/octet-stream'\n    });\n    self.postMessage({\n      sessionId,\n      sessionCreationDate,\n      gzipBlob: blob,\n      chunkIndex,\n      totalChunks,\n      event\n    });\n  }\n}","map":{"version":3,"names":["getWorkerString","MAX_CHUNK_SIZE","ERROR_MESSAGE","importScripts","err","console","warn","self","postMessage","event","onmessage","data","recordsData","omitSquareBrackets","JSON","stringify","records","sessionId","sessionCreationDate","gzipData","pako","gzip","gzipSize","byteLength","totalChunks","Math","ceil","i","start","end","chunk","slice","createBlobAndSend","onerror","json","chunkIndex","blob","Blob","type","gzipBlob"],"sources":["../../../../../libs/browser/src/workers/session-recording-worker.ts"],"sourcesContent":[null],"mappings":"AAAA;AACA,OAAM,SAAUA,eAAeA,CAAA;EAC7B,MAAMC,cAAc,GAAW,IAAI,GAAG,IAAI,CAAC,CAAC;EAE5C,MAAMC,aAAa,GACjB,gEAAgE;EAElE,IAAI;IACFC,aAAa,CACX,2EAA2E,CAC5E;GACF,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,IAAI,CAACJ,aAAa,EAAEE,GAAG,CAAC;IAEhCG,IAAI,CAACC,WAAW,CAAC;MACfC,KAAK,EAAE;KACR,CAAC;IAEF;;EAGFF,IAAI,CAACG,SAAS,GAAG,CAAC;IAAEC;EAAI,CAAE,KAAU;IAClC,MAAMC,WAAW,GAAWC,kBAAkB,CAC5CC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAACK,OAAO,CAAC,CAC7B;IAED,MAAMC,SAAS,GAAWN,IAAI,CAACM,SAAS;IACxC,MAAMC,mBAAmB,GAAWP,IAAI,CAACO,mBAAmB;IAE5D,MAAMC,QAAQ,GAAe,IAAI,CAACC,IAAI,CAACC,IAAI,CAACT,WAAW,CAAC;IACxD,MAAMU,QAAQ,GAAWH,QAAQ,CAACI,UAAU;IAE5C,IAAID,QAAQ,IAAIrB,cAAc,EAAE;MAC9B,MAAMuB,WAAW,GAAWC,IAAI,CAACC,IAAI,CAACJ,QAAQ,GAAGrB,cAAc,CAAC;MAEhE,KAAK,IAAI0B,CAAC,GAAW,CAAC,EAAEA,CAAC,GAAGH,WAAW,EAAEG,CAAC,EAAE,EAAE;QAC5C,MAAMC,KAAK,GAAWD,CAAC,GAAG1B,cAAc;QACxC,MAAM4B,GAAG,GAAW,CAACF,CAAC,GAAG,CAAC,IAAI1B,cAAc;QAE5C,MAAM6B,KAAK,GAAeX,QAAQ,CAACY,KAAK,CAACH,KAAK,EAAEC,GAAG,CAAC;QACpDG,iBAAiB,CACff,SAAS,EACTC,mBAAmB,EACnBY,KAAK,EACLH,CAAC,EACDH,WAAW,GAAG,CAAC,EACf,iBAAiB,CAClB;;KAEJ,MAAM;MACLQ,iBAAiB,CAACf,SAAS,EAAEC,mBAAmB,EAAEC,QAAQ,CAAC;;EAE/D,CAAC;EAEDZ,IAAI,CAAC0B,OAAO,GAAI7B,GAAmB,IAAU;IAC3CC,OAAO,CAACC,IAAI,CAACJ,aAAa,EAAEE,GAAG,CAAC;IAEhCG,IAAI,CAACC,WAAW,CAAC;MACfC,KAAK,EAAE;KACR,CAAC;EACJ,CAAC;EAED,SAASI,kBAAkBA,CAACqB,IAAY;IACtC,OAAOA,IAAI,CAACH,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1B;EAEA,SAASC,iBAAiBA,CACxBf,SAAiB,EACjBC,mBAA2B,EAC3BC,QAAoB,EACpBgB,UAAmB,EACnBX,WAAoB,EACpBf,KAAA,GAA8C,gBAAgB;IAE9D,MAAM2B,IAAI,GAAS,IAAIC,IAAI,CAAC,CAAClB,QAAQ,CAAC,EAAE;MACtCmB,IAAI,EAAE;KACP,CAAC;IAEF/B,IAAI,CAACC,WAAW,CAAC;MACfS,SAAS;MACTC,mBAAmB;MACnBqB,QAAQ,EAAEH,IAAI;MACdD,UAAU;MACVX,WAAW;MACXf;KACD,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}