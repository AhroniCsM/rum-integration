{"ast":null,"code":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport { diag, metrics, trace } from '@opentelemetry/api';\nimport { logs } from '@opentelemetry/api-logs';\nimport * as shimmer from 'shimmer';\n/**\n * Base abstract internal class for instrumenting node and web plugins\n */\nvar InstrumentationAbstract = /** @class */function () {\n  function InstrumentationAbstract(instrumentationName, instrumentationVersion, config) {\n    this.instrumentationName = instrumentationName;\n    this.instrumentationVersion = instrumentationVersion;\n    /* Api to wrap instrumented method */\n    this._wrap = shimmer.wrap;\n    /* Api to unwrap instrumented methods */\n    this._unwrap = shimmer.unwrap;\n    /* Api to mass wrap instrumented method */\n    this._massWrap = shimmer.massWrap;\n    /* Api to mass unwrap instrumented methods */\n    this._massUnwrap = shimmer.massUnwrap;\n    // copy config first level properties to ensure they are immutable.\n    // nested properties are not copied, thus are mutable from the outside.\n    this._config = __assign({\n      enabled: true\n    }, config);\n    this._diag = diag.createComponentLogger({\n      namespace: instrumentationName\n    });\n    this._tracer = trace.getTracer(instrumentationName, instrumentationVersion);\n    this._meter = metrics.getMeter(instrumentationName, instrumentationVersion);\n    this._logger = logs.getLogger(instrumentationName, instrumentationVersion);\n    this._updateMetricInstruments();\n  }\n  Object.defineProperty(InstrumentationAbstract.prototype, \"meter\", {\n    /* Returns meter */\n    get: function () {\n      return this._meter;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Sets MeterProvider to this plugin\n   * @param meterProvider\n   */\n  InstrumentationAbstract.prototype.setMeterProvider = function (meterProvider) {\n    this._meter = meterProvider.getMeter(this.instrumentationName, this.instrumentationVersion);\n    this._updateMetricInstruments();\n  };\n  Object.defineProperty(InstrumentationAbstract.prototype, \"logger\", {\n    /* Returns logger */\n    get: function () {\n      return this._logger;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Sets LoggerProvider to this plugin\n   * @param loggerProvider\n   */\n  InstrumentationAbstract.prototype.setLoggerProvider = function (loggerProvider) {\n    this._logger = loggerProvider.getLogger(this.instrumentationName, this.instrumentationVersion);\n  };\n  /**\n   * @experimental\n   *\n   * Get module definitions defined by {@link init}.\n   * This can be used for experimental compile-time instrumentation.\n   *\n   * @returns an array of {@link InstrumentationModuleDefinition}\n   */\n  InstrumentationAbstract.prototype.getModuleDefinitions = function () {\n    var _a;\n    var initResult = (_a = this.init()) !== null && _a !== void 0 ? _a : [];\n    if (!Array.isArray(initResult)) {\n      return [initResult];\n    }\n    return initResult;\n  };\n  /**\n   * Sets the new metric instruments with the current Meter.\n   */\n  InstrumentationAbstract.prototype._updateMetricInstruments = function () {\n    return;\n  };\n  /* Returns InstrumentationConfig */\n  InstrumentationAbstract.prototype.getConfig = function () {\n    return this._config;\n  };\n  /**\n   * Sets InstrumentationConfig to this plugin\n   * @param InstrumentationConfig\n   */\n  InstrumentationAbstract.prototype.setConfig = function (config) {\n    // copy config first level properties to ensure they are immutable.\n    // nested properties are not copied, thus are mutable from the outside.\n    this._config = __assign({}, config);\n  };\n  /**\n   * Sets TraceProvider to this plugin\n   * @param tracerProvider\n   */\n  InstrumentationAbstract.prototype.setTracerProvider = function (tracerProvider) {\n    this._tracer = tracerProvider.getTracer(this.instrumentationName, this.instrumentationVersion);\n  };\n  Object.defineProperty(InstrumentationAbstract.prototype, \"tracer\", {\n    /* Returns tracer */\n    get: function () {\n      return this._tracer;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Execute span customization hook, if configured, and log any errors.\n   * Any semantics of the trigger and info are defined by the specific instrumentation.\n   * @param hookHandler The optional hook handler which the user has configured via instrumentation config\n   * @param triggerName The name of the trigger for executing the hook for logging purposes\n   * @param span The span to which the hook should be applied\n   * @param info The info object to be passed to the hook, with useful data the hook may use\n   */\n  InstrumentationAbstract.prototype._runSpanCustomizationHook = function (hookHandler, triggerName, span, info) {\n    if (!hookHandler) {\n      return;\n    }\n    try {\n      hookHandler(span, info);\n    } catch (e) {\n      this._diag.error(\"Error running span customization hook due to exception in handler\", {\n        triggerName: triggerName\n      }, e);\n    }\n  };\n  return InstrumentationAbstract;\n}();\nexport { InstrumentationAbstract };","map":{"version":3,"names":["diag","metrics","trace","logs","shimmer","InstrumentationAbstract","instrumentationName","instrumentationVersion","config","_wrap","wrap","_unwrap","unwrap","_massWrap","massWrap","_massUnwrap","massUnwrap","_config","__assign","enabled","_diag","createComponentLogger","namespace","_tracer","getTracer","_meter","getMeter","_logger","getLogger","_updateMetricInstruments","Object","defineProperty","prototype","get","setMeterProvider","meterProvider","setLoggerProvider","loggerProvider","getModuleDefinitions","initResult","_a","init","Array","isArray","getConfig","setConfig","setTracerProvider","tracerProvider","_runSpanCustomizationHook","hookHandler","triggerName","span","info","e","error"],"sources":["/Users/aharon.shahar/Desktop/tasks/NodeJS/coralogix-frontend/node_modules/@opentelemetry/instrumentation/src/instrumentation.ts"],"sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  diag,\n  DiagLogger,\n  metrics,\n  Meter,\n  MeterProvider,\n  trace,\n  Tracer,\n  TracerProvider,\n  Span,\n} from '@opentelemetry/api';\nimport { Logger, LoggerProvider, logs } from '@opentelemetry/api-logs';\nimport * as shimmer from 'shimmer';\nimport {\n  InstrumentationModuleDefinition,\n  Instrumentation,\n  InstrumentationConfig,\n  SpanCustomizationHook,\n} from './types';\n\n/**\n * Base abstract internal class for instrumenting node and web plugins\n */\nexport abstract class InstrumentationAbstract<\n  ConfigType extends InstrumentationConfig = InstrumentationConfig,\n> implements Instrumentation<ConfigType>\n{\n  protected _config: ConfigType;\n\n  private _tracer: Tracer;\n  private _meter: Meter;\n  private _logger: Logger;\n  protected _diag: DiagLogger;\n\n  constructor(\n    public readonly instrumentationName: string,\n    public readonly instrumentationVersion: string,\n    config: ConfigType\n  ) {\n    // copy config first level properties to ensure they are immutable.\n    // nested properties are not copied, thus are mutable from the outside.\n    this._config = {\n      enabled: true,\n      ...config,\n    };\n\n    this._diag = diag.createComponentLogger({\n      namespace: instrumentationName,\n    });\n\n    this._tracer = trace.getTracer(instrumentationName, instrumentationVersion);\n    this._meter = metrics.getMeter(instrumentationName, instrumentationVersion);\n    this._logger = logs.getLogger(instrumentationName, instrumentationVersion);\n    this._updateMetricInstruments();\n  }\n\n  /* Api to wrap instrumented method */\n  protected _wrap = shimmer.wrap;\n  /* Api to unwrap instrumented methods */\n  protected _unwrap = shimmer.unwrap;\n  /* Api to mass wrap instrumented method */\n  protected _massWrap = shimmer.massWrap;\n  /* Api to mass unwrap instrumented methods */\n  protected _massUnwrap = shimmer.massUnwrap;\n\n  /* Returns meter */\n  protected get meter(): Meter {\n    return this._meter;\n  }\n\n  /**\n   * Sets MeterProvider to this plugin\n   * @param meterProvider\n   */\n  public setMeterProvider(meterProvider: MeterProvider): void {\n    this._meter = meterProvider.getMeter(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n\n    this._updateMetricInstruments();\n  }\n\n  /* Returns logger */\n  protected get logger(): Logger {\n    return this._logger;\n  }\n\n  /**\n   * Sets LoggerProvider to this plugin\n   * @param loggerProvider\n   */\n  public setLoggerProvider(loggerProvider: LoggerProvider): void {\n    this._logger = loggerProvider.getLogger(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n  }\n\n  /**\n   * @experimental\n   *\n   * Get module definitions defined by {@link init}.\n   * This can be used for experimental compile-time instrumentation.\n   *\n   * @returns an array of {@link InstrumentationModuleDefinition}\n   */\n  public getModuleDefinitions(): InstrumentationModuleDefinition[] {\n    const initResult = this.init() ?? [];\n    if (!Array.isArray(initResult)) {\n      return [initResult];\n    }\n\n    return initResult;\n  }\n\n  /**\n   * Sets the new metric instruments with the current Meter.\n   */\n  protected _updateMetricInstruments(): void {\n    return;\n  }\n\n  /* Returns InstrumentationConfig */\n  public getConfig(): ConfigType {\n    return this._config;\n  }\n\n  /**\n   * Sets InstrumentationConfig to this plugin\n   * @param InstrumentationConfig\n   */\n  public setConfig(config: ConfigType): void {\n    // copy config first level properties to ensure they are immutable.\n    // nested properties are not copied, thus are mutable from the outside.\n    this._config = { ...config };\n  }\n\n  /**\n   * Sets TraceProvider to this plugin\n   * @param tracerProvider\n   */\n  public setTracerProvider(tracerProvider: TracerProvider): void {\n    this._tracer = tracerProvider.getTracer(\n      this.instrumentationName,\n      this.instrumentationVersion\n    );\n  }\n\n  /* Returns tracer */\n  protected get tracer(): Tracer {\n    return this._tracer;\n  }\n\n  /* Disable plugin */\n  public abstract enable(): void;\n\n  /* Enable plugin */\n  public abstract disable(): void;\n\n  /**\n   * Init method in which plugin should define _modules and patches for\n   * methods.\n   */\n  protected abstract init():\n    | InstrumentationModuleDefinition\n    | InstrumentationModuleDefinition[]\n    | void;\n\n  /**\n   * Execute span customization hook, if configured, and log any errors.\n   * Any semantics of the trigger and info are defined by the specific instrumentation.\n   * @param hookHandler The optional hook handler which the user has configured via instrumentation config\n   * @param triggerName The name of the trigger for executing the hook for logging purposes\n   * @param span The span to which the hook should be applied\n   * @param info The info object to be passed to the hook, with useful data the hook may use\n   */\n  protected _runSpanCustomizationHook<SpanCustomizationInfoType>(\n    hookHandler: SpanCustomizationHook<SpanCustomizationInfoType> | undefined,\n    triggerName: string,\n    span: Span,\n    info: SpanCustomizationInfoType\n  ) {\n    if (!hookHandler) {\n      return;\n    }\n\n    try {\n      hookHandler(span, info);\n    } catch (e) {\n      this._diag.error(\n        `Error running span customization hook due to exception in handler`,\n        { triggerName },\n        e\n      );\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}