{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport { EventType } from '@rrweb/types';\nimport { BATCH_TIME_DELAY, MAX_BATCH_TIME_MS, MAX_MUTATIONS_FOR_SESSION_RECORDING, SESSION_RECORDER_KEY, SESSION_RECORDING_DEFAULT_ERROR_MESSAGE, SESSION_RECORDING_DEFAULT_HEADERS, SESSION_RECORDING_NETWORK_ERR0R_MESSAGE, SESSION_RECORDING_POSTFIX_URL } from './session.consts';\nimport { getSdkConfig } from '../helpers';\nimport { getWorkerString } from '../workers/session-recording-worker';\nimport { record } from 'rrweb';\nimport { reportInternalEvent } from '../internal-event-reporter';\nimport { Request } from '../Request';\nimport { getRecordConsolePlugin } from '@rrweb/rrweb-plugin-console-record';\nimport { getNowTime } from '../utils/time';\nexport class SessionRecorder {\n  constructor(sessionManager, recordConfig) {\n    var _a;\n    this.isAutoStartRecording = false;\n    this.onlySessionWithErrorMode = false;\n    this.recordEvents = [];\n    this.recordEventsForSessionWithError = [[], []];\n    this.segmentIndexCounter = {};\n    this.hasRecording = false;\n    this.recordingStopped = false;\n    this.batchTimeDelay = BATCH_TIME_DELAY;\n    this.isErrorOccurred = false;\n    this.debugMode = !!((_a = getSdkConfig()) === null || _a === void 0 ? void 0 : _a.debug);\n    this._recordingStopDueToTimeout = false;\n    this.handleRecordEvent = (event, isCheckout) => {\n      if (!this.recordingStopped) {\n        if (this.onlySessionWithErrorMode) {\n          this.handleRecordEventForSessionWithError(event, isCheckout);\n        } else {\n          this.recordEvents.push(event);\n        }\n      }\n    };\n    this.prepareRecordEventsBeforeSend = () => {\n      if (this.onlySessionWithErrorMode) {\n        this.prepareRecordEventsForSessionWithError();\n      } else {\n        if (!this.recordEvents.length) {\n          return;\n        }\n        this.compressRecordData(this.recordEvents);\n        this.resetBatching();\n      }\n    };\n    this.sendRecordEvents = (sessionId, sessionCreationTime, data, chunkIndex, totalChunks, dataSplit) => {\n      const formData = new FormData();\n      const {\n        application\n      } = getSdkConfig();\n      let segmentIndex;\n      if (!this.segmentIndexCounter[sessionId]) {\n        this.segmentIndexCounter[sessionId] = 0;\n      }\n      if (dataSplit) {\n        segmentIndex = chunkIndex === totalChunks ? this.segmentIndexCounter[sessionId]++ : this.segmentIndexCounter[sessionId];\n      } else {\n        segmentIndex = this.segmentIndexCounter[sessionId]++;\n      }\n      const metaData = {\n        segmentIndex,\n        segmentSize: data.size,\n        segmentTimestamp: getNowTime(),\n        sessionCreationTime,\n        sessionId,\n        application,\n        subIndex: chunkIndex !== null && chunkIndex !== void 0 ? chunkIndex : -1\n      };\n      formData.append('chunk', data);\n      formData.append('metaData', JSON.stringify(metaData));\n      const sendRecordRequest = () => __awaiter(this, void 0, void 0, function* () {\n        var _a;\n        try {\n          const response = !this.isErrorOccurred ? yield (_a = this.request) === null || _a === void 0 ? void 0 : _a.send(formData) : undefined;\n          this.handleSessionRecordingResponse(response);\n        } catch (error) {\n          this.handleSessionRecordingResponse(undefined);\n          // todo: send internal error after sessions changes issues resolve\n          // reportInternalEvent('error', error?.message);\n        }\n      });\n      if (dataSplit) {\n        this.batchTimeout = setTimeout(sendRecordRequest, this.batchTimeDelay);\n        this.batchTimeDelay += BATCH_TIME_DELAY;\n      } else {\n        sendRecordRequest();\n        this.batchTimeDelay = BATCH_TIME_DELAY;\n      }\n    };\n    window[SESSION_RECORDER_KEY] = this;\n    this.sessionManager = sessionManager;\n    const {\n      onlySessionWithErrorMode,\n      maxRecordTimeForSessionWithError\n    } = sessionManager;\n    const {\n      maxMutations,\n      autoStartSessionRecording\n    } = recordConfig;\n    this.onlySessionWithErrorMode = onlySessionWithErrorMode;\n    this.maxRecordTimeForSessionWithError = maxRecordTimeForSessionWithError;\n    this.isAutoStartRecording = autoStartSessionRecording;\n    this.maxMutations = maxMutations !== null && maxMutations !== void 0 ? maxMutations : MAX_MUTATIONS_FOR_SESSION_RECORDING;\n    this.recordConfig = this.prepareRecordConfig(recordConfig);\n    if (window.Worker) {\n      try {\n        const workerCode = `(${getWorkerString.toString()})()`;\n        const workerUrl = URL.createObjectURL(new Blob([workerCode]));\n        this.sessionWorker = new Worker(workerUrl);\n        if (this.isAutoStartRecording) {\n          this.startRecording();\n        }\n        this.request = new Request({\n          suffix: SESSION_RECORDING_POSTFIX_URL,\n          headers: SESSION_RECORDING_DEFAULT_HEADERS\n        });\n        this.registerToWorkerMessages();\n      } catch (err) {\n        if (this.debugMode) {\n          console.warn('Coralogix Browser SDK - Web worker not created due to: ', err);\n        }\n      }\n    } else {\n      if (this.debugMode) {\n        console.warn(SESSION_RECORDING_DEFAULT_ERROR_MESSAGE);\n      }\n    }\n  }\n  getSessionHasRecording() {\n    var _a;\n    return this.hasRecording && !!this.segmentIndexCounter[(_a = this.sessionManager.getActiveSession()) === null || _a === void 0 ? void 0 : _a.sessionId];\n  }\n  getIsAutoStartRecording() {\n    return this.isAutoStartRecording;\n  }\n  set recordingStopDueToTimeout(value) {\n    this._recordingStopDueToTimeout = value;\n  }\n  get recordingStopDueToTimeout() {\n    return this._recordingStopDueToTimeout;\n  }\n  startRecording() {\n    if (!this.sessionWorker || this.recordRef) {\n      return;\n    }\n    if (this.debugMode) {\n      console.log('Coralogix Browser SDK - Session recording started');\n    }\n    this.startMutationObserver();\n    this.resetBatching();\n    this.hasRecording = true;\n    this.recordingStopped = false;\n    this.isErrorOccurred = false;\n    this.recordingStopDueToTimeout = false;\n    this.recordRef = record(this.recordConfig);\n    this.startBatchingRecords();\n  }\n  stopRecording() {\n    if (!this.recordRef) {\n      return;\n    }\n    if (this.debugMode) {\n      console.log('Coralogix Browser SDK - Session recording stopped');\n    }\n    this.recordRef();\n    this.recordRef = undefined;\n    this.recordingStopped = true;\n    this.hasRecording = false;\n    this.prepareRecordEventsBeforeSend();\n    this.clearIntervals();\n    this.stopMutationObserver();\n  }\n  stopMutationObserver() {\n    var _a;\n    (_a = this.mutationObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n  }\n  startMutationObserver() {\n    this.stopMutationObserver();\n    this.mutationObserver = new MutationObserver(mutations => {\n      if (mutations.length > this.maxMutations) {\n        const message = `Coralogix Browser SDK - Recording stopped due to too many mutations ${mutations.length}`;\n        console.warn(message);\n        reportInternalEvent('recording-stop', message);\n        this.stopRecording();\n      }\n    });\n    this.mutationObserver.observe(document, {\n      attributes: false,\n      attributeOldValue: false,\n      characterData: false,\n      characterDataOldValue: false,\n      childList: true,\n      subtree: true\n    });\n  }\n  clearIntervals() {\n    if (this.batchingTimeInterval) {\n      clearInterval(this.batchingTimeInterval);\n    }\n  }\n  prepareRecordConfig(recordConfig) {\n    var _a;\n    const {\n      excludeDOMOptions,\n      recordConsoleEvents\n    } = recordConfig || {};\n    // @ts-ignore\n    this.recordConfig = Object.assign(Object.assign({}, recordConfig), {\n      emit: this.handleRecordEvent,\n      checkoutEveryNms: this.onlySessionWithErrorMode ? this.maxRecordTimeForSessionWithError : undefined,\n      slimDOMOptions: Object.assign(Object.assign({}, excludeDOMOptions), {\n        script: (_a = excludeDOMOptions === null || excludeDOMOptions === void 0 ? void 0 : excludeDOMOptions.script) !== null && _a !== void 0 ? _a : true\n      }),\n      plugins: recordConsoleEvents ? [getRecordConsolePlugin()] : []\n    });\n    return this.recordConfig;\n  }\n  handleRecordEventForSessionWithError(event, isCheckout) {\n    const shouldIgnoreEvent = this.sessionManager.sessionHasError && !!isCheckout && event.type === EventType.FullSnapshot;\n    if (shouldIgnoreEvent) {\n      return;\n    }\n    const shouldAddNewSnapshot = !!isCheckout && event.type === EventType.Meta;\n    // Add new snapshot to the cache\n    if (shouldAddNewSnapshot) {\n      this.recordEventsForSessionWithError.push([]);\n    }\n    const {\n      length,\n      [length - 1]: lastEvents\n    } = this.recordEventsForSessionWithError;\n    lastEvents.push(event);\n  }\n  prepareRecordEventsForSessionWithError() {\n    const {\n      length,\n      [length - 2]: beforeLast,\n      [length - 1]: last\n    } = this.recordEventsForSessionWithError;\n    if (this.sessionManager.sessionHasError) {\n      const lastEvents = beforeLast.concat(last);\n      if (!lastEvents.length) {\n        return;\n      }\n      this.compressRecordData(lastEvents);\n      this.resetBatching();\n    } else {\n      // If no error occurred, we need to keep only the last 2 snapshots\n      this.recordEventsForSessionWithError = [beforeLast, last];\n    }\n  }\n  compressRecordData(recordEvents) {\n    const {\n      sessionId,\n      sessionCreationDate\n    } = this.sessionManager.getActiveSession() || {};\n    this.sessionWorker.postMessage({\n      event: 'compressRecordData',\n      records: recordEvents,\n      sessionId,\n      sessionCreationDate\n    });\n  }\n  registerToWorkerMessages() {\n    this.sessionWorker.onmessage = ({\n      data\n    }) => {\n      switch (data.event) {\n        case 'sendRecordData':\n          this.sendRecordEvents(data.sessionId, data.sessionCreationDate, data.gzipBlob);\n          break;\n        case 'splitRecordData':\n          this.sendRecordEvents(data.sessionId, data.sessionCreationDate, data.gzipBlob, data.chunkIndex, data.totalChunks, true);\n          break;\n        case 'stopRecording':\n          this.stopRecording();\n          break;\n      }\n    };\n  }\n  resetBatching() {\n    if (this.onlySessionWithErrorMode) {\n      this.recordEventsForSessionWithError = [[], []];\n    } else {\n      this.recordEvents = [];\n    }\n  }\n  handleSessionRecordingResponse(response) {\n    if (!(response === null || response === void 0 ? void 0 : response.ok) && !this.isErrorOccurred) {\n      console.warn(SESSION_RECORDING_NETWORK_ERR0R_MESSAGE);\n      this.isErrorOccurred = true;\n      this.stopRecording();\n      if (this.batchTimeout) {\n        clearTimeout(this.batchTimeout);\n      }\n    } else {\n      this.isErrorOccurred = false;\n    }\n  }\n  startBatchingRecords() {\n    this.batchingTimeInterval = setInterval(this.prepareRecordEventsBeforeSend, MAX_BATCH_TIME_MS);\n  }\n}","map":{"version":3,"names":["EventType","BATCH_TIME_DELAY","MAX_BATCH_TIME_MS","MAX_MUTATIONS_FOR_SESSION_RECORDING","SESSION_RECORDER_KEY","SESSION_RECORDING_DEFAULT_ERROR_MESSAGE","SESSION_RECORDING_DEFAULT_HEADERS","SESSION_RECORDING_NETWORK_ERR0R_MESSAGE","SESSION_RECORDING_POSTFIX_URL","getSdkConfig","getWorkerString","record","reportInternalEvent","Request","getRecordConsolePlugin","getNowTime","SessionRecorder","constructor","sessionManager","recordConfig","isAutoStartRecording","onlySessionWithErrorMode","recordEvents","recordEventsForSessionWithError","segmentIndexCounter","hasRecording","recordingStopped","batchTimeDelay","isErrorOccurred","debugMode","_a","debug","_recordingStopDueToTimeout","handleRecordEvent","event","isCheckout","handleRecordEventForSessionWithError","push","prepareRecordEventsBeforeSend","prepareRecordEventsForSessionWithError","length","compressRecordData","resetBatching","sendRecordEvents","sessionId","sessionCreationTime","data","chunkIndex","totalChunks","dataSplit","formData","FormData","application","segmentIndex","metaData","segmentSize","size","segmentTimestamp","subIndex","append","JSON","stringify","sendRecordRequest","__awaiter","response","request","send","undefined","handleSessionRecordingResponse","error","batchTimeout","setTimeout","window","maxRecordTimeForSessionWithError","maxMutations","autoStartSessionRecording","prepareRecordConfig","Worker","workerCode","toString","workerUrl","URL","createObjectURL","Blob","sessionWorker","startRecording","suffix","headers","registerToWorkerMessages","err","console","warn","getSessionHasRecording","getActiveSession","getIsAutoStartRecording","recordingStopDueToTimeout","value","recordRef","log","startMutationObserver","startBatchingRecords","stopRecording","clearIntervals","stopMutationObserver","mutationObserver","disconnect","MutationObserver","mutations","message","observe","document","attributes","attributeOldValue","characterData","characterDataOldValue","childList","subtree","batchingTimeInterval","clearInterval","excludeDOMOptions","recordConsoleEvents","Object","assign","emit","checkoutEveryNms","slimDOMOptions","script","plugins","shouldIgnoreEvent","sessionHasError","type","FullSnapshot","shouldAddNewSnapshot","Meta","lastEvents","beforeLast","last","concat","sessionCreationDate","postMessage","records","onmessage","gzipBlob","ok","clearTimeout","setInterval"],"sources":["../../../../../libs/browser/src/session/sessionRecorder.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}