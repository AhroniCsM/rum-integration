{"ast":null,"code":"import { InstrumentationBase } from '@opentelemetry/instrumentation';\nimport { onCLS, onFCP, onFID, onINP, onLCP, onTTFB } from 'web-vitals/attribution';\nimport { CoralogixAttributes } from '../constants';\nimport { CoralogixEventType, PerformanceTypes } from '../types';\nimport { isEmpty, omit } from '../utils/object';\nimport { ALL_WEB_VITALS_METRICS, WEB_VITALS_INSTRUMENTATION_NAME, WEB_VITALS_INSTRUMENTATION_VERSION } from './instrumentation.consts';\nimport { calculateTotalBlockingTime, generateWebVitalUniqueID, getCircularReplacer, rateForTBTMetricValue, supportedPerformanceTypes } from '../utils';\nexport class CoralogixWebVitalsInstrumentation extends InstrumentationBase {\n  constructor(config) {\n    super(WEB_VITALS_INSTRUMENTATION_NAME, WEB_VITALS_INSTRUMENTATION_VERSION, config);\n    this.metrics = isEmpty(config.metrics) ? ALL_WEB_VITALS_METRICS : config.metrics;\n    this.registerToCoreWebVitalMetrics();\n    this.registerToCalculatedWebVitalMetrics();\n  }\n  registerToCoreWebVitalMetrics() {\n    // Capture First Input Delay\n    if (this.metrics.fid) {\n      onFID(metric => {\n        this.onReport(metric);\n      });\n    }\n    // Capture Cumulative Layout Shift\n    if (this.metrics.cls) {\n      onCLS(metric => {\n        this.onReport(metric);\n      });\n    }\n    // Capture Largest Contentful Paint\n    if (this.metrics.lcp) {\n      onLCP(metric => {\n        this.onReport(metric);\n      });\n    }\n    // Capture First Contentful Paint\n    if (this.metrics.fcp) {\n      onFCP(metric => {\n        this.onReport(metric);\n      });\n    }\n    // Capture Interaction to Next Paint\n    if (this.metrics.inp) {\n      onINP(metric => {\n        this.onReport(metric);\n      });\n    }\n    // Capture Time to First Byte\n    if (this.metrics.ttfb) {\n      onTTFB(metric => {\n        this.onReport(metric);\n      });\n    }\n  }\n  registerToCalculatedWebVitalMetrics() {\n    if (supportedPerformanceTypes[PerformanceTypes.LongTask]) {\n      if (this.metrics.tbt) {\n        this.calculateAllTotalBlockingTime();\n      }\n    } else {\n      console.warn('Coralogix Browser SDK - browser doesnt support TBT events');\n    }\n    if (supportedPerformanceTypes[PerformanceTypes.Navigation]) {\n      if (this.metrics.lt) {\n        this.calculateLoadingPageTime();\n      }\n    } else {\n      console.warn('Coralogix Browser SDK - browser doesnt support navigation events');\n    }\n  }\n  // function that creates a span for each web vital and reports the data\n  // as attributes\n  onReport(metric) {\n    // start the span\n    const webVitalsSpan = this.tracer.startSpan(CoralogixEventType.WEB_VITALS);\n    let metricData = metric.entries ? omit(metric, 'entries') : metric;\n    metricData = omit(metricData, 'attribution.navigationEntry');\n    if (metricData.name === 'INP') {\n      metricData = omit(metricData, 'attribution.interactionTargetElement');\n    }\n    webVitalsSpan.setAttribute(CoralogixAttributes.EVENT_TYPE, CoralogixEventType.WEB_VITALS);\n    // add core web vital attributes\n    webVitalsSpan.setAttribute(WEB_VITALS_INSTRUMENTATION_NAME, JSON.stringify(metricData, getCircularReplacer()));\n    // end the span\n    webVitalsSpan.end();\n  }\n  calculateLoadingPageTime() {\n    this.loadingPageObserver = new PerformanceObserver(list => {\n      let loadTimeMetric = {};\n      // @ts-ignore\n      list.getEntries().forEach(entry => {\n        const {\n          duration,\n          type,\n          name\n        } = entry;\n        loadTimeMetric = {\n          //@ts-ignore\n          name: 'LT',\n          id: generateWebVitalUniqueID(),\n          value: duration,\n          url: name,\n          //@ts-ignore\n          navigationType: type\n        };\n        if (duration) {\n          this.onReport(loadTimeMetric);\n        }\n      });\n    });\n    this.loadingPageObserver.observe({\n      type: PerformanceTypes.Navigation,\n      buffered: true\n    });\n  }\n  calculateAllTotalBlockingTime() {\n    this.totalBLockingTimeObserver = new PerformanceObserver(list => {\n      const totalBlockingTime = calculateTotalBlockingTime(list.getEntries());\n      const tbtMetric = {\n        //@ts-ignore\n        name: 'TBT',\n        id: generateWebVitalUniqueID(),\n        rating: rateForTBTMetricValue(totalBlockingTime),\n        value: totalBlockingTime\n      };\n      this.onReport(tbtMetric);\n    });\n    this.totalBLockingTimeObserver.observe({\n      type: PerformanceTypes.LongTask,\n      buffered: true\n    });\n  }\n  enable() {}\n  disable() {\n    var _a, _b;\n    (_a = this.loadingPageObserver) === null || _a === void 0 ? void 0 : _a.disconnect();\n    (_b = this.totalBLockingTimeObserver) === null || _b === void 0 ? void 0 : _b.disconnect();\n  }\n  init() {\n    return undefined;\n  }\n}","map":{"version":3,"names":["InstrumentationBase","onCLS","onFCP","onFID","onINP","onLCP","onTTFB","CoralogixAttributes","CoralogixEventType","PerformanceTypes","isEmpty","omit","ALL_WEB_VITALS_METRICS","WEB_VITALS_INSTRUMENTATION_NAME","WEB_VITALS_INSTRUMENTATION_VERSION","calculateTotalBlockingTime","generateWebVitalUniqueID","getCircularReplacer","rateForTBTMetricValue","supportedPerformanceTypes","CoralogixWebVitalsInstrumentation","constructor","config","metrics","registerToCoreWebVitalMetrics","registerToCalculatedWebVitalMetrics","fid","metric","onReport","cls","lcp","fcp","inp","ttfb","LongTask","tbt","calculateAllTotalBlockingTime","console","warn","Navigation","lt","calculateLoadingPageTime","webVitalsSpan","tracer","startSpan","WEB_VITALS","metricData","entries","name","setAttribute","EVENT_TYPE","JSON","stringify","end","loadingPageObserver","PerformanceObserver","list","loadTimeMetric","getEntries","forEach","entry","duration","type","id","value","url","navigationType","observe","buffered","totalBLockingTimeObserver","totalBlockingTime","tbtMetric","rating","enable","disable","_a","disconnect","_b","init","undefined"],"sources":["../../../../../libs/browser/src/instrumentations/CoralogixWebVitalsInstrumentation.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}