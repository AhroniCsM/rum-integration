{"ast":null,"code":"import { __awaiter } from \"tslib\";\nexport function handlePropagators(config, tracerProvider) {\n  var _a, _b;\n  return __awaiter(this, void 0, void 0, function* () {\n    if ((_a = config.traceParentInHeader) === null || _a === void 0 ? void 0 : _a.enabled) {\n      let propagators = [];\n      const {\n        CompositePropagator,\n        W3CBaggagePropagator,\n        W3CTraceContextPropagator\n      } = yield import('@opentelemetry/core');\n      const {\n        propagateB3TraceHeader,\n        propagateAwsXrayTraceHeader\n      } = ((_b = config.traceParentInHeader) === null || _b === void 0 ? void 0 : _b.options) || {};\n      if (!propagateAwsXrayTraceHeader && !propagateB3TraceHeader) {\n        propagators = [...propagators, new W3CBaggagePropagator(), new W3CTraceContextPropagator()];\n      }\n      if (propagateAwsXrayTraceHeader) {\n        const {\n          AWSXRayPropagator\n        } = yield import('@opentelemetry/propagator-aws-xray');\n        propagators.push(new AWSXRayPropagator());\n      }\n      if (propagateB3TraceHeader) {\n        const {\n          B3InjectEncoding,\n          B3Propagator\n        } = yield import('@opentelemetry/propagator-b3');\n        const {\n          singleHeader,\n          multiHeader\n        } = propagateB3TraceHeader;\n        if (singleHeader) {\n          propagators.push(new B3Propagator());\n        }\n        if (multiHeader) {\n          propagators.push(new B3Propagator({\n            injectEncoding: B3InjectEncoding.MULTI_HEADER\n          }));\n        }\n      }\n      tracerProvider.register({\n        propagator: new CompositePropagator({\n          propagators\n        })\n      });\n    }\n  });\n}","map":{"version":3,"names":["handlePropagators","config","tracerProvider","_a","traceParentInHeader","enabled","propagators","CompositePropagator","W3CBaggagePropagator","W3CTraceContextPropagator","propagateB3TraceHeader","propagateAwsXrayTraceHeader","_b","options","AWSXRayPropagator","push","B3InjectEncoding","B3Propagator","singleHeader","multiHeader","injectEncoding","MULTI_HEADER","register","propagator"],"sources":["../../../../libs/browser/src/propagators.ts"],"sourcesContent":[null],"mappings":";AAIA,OAAM,SAAgBA,iBAAiBA,CACrCC,MAAiC,EACjCC,cAA0C;;;IAE1C,IAAI,CAAAC,EAAA,GAAAF,MAAM,CAACG,mBAAmB,cAAAD,EAAA,uBAAAA,EAAA,CAAEE,OAAO,EAAE;MACvC,IAAIC,WAAW,GAAwB,EAAE;MAEzC,MAAM;QACJC,mBAAmB;QACnBC,oBAAoB;QACpBC;MAAyB,CAC1B,GAAG,MAAM,MAAM,CAAC,qBAAqB,CAAC;MAEvC,MAAM;QAAEC,sBAAsB;QAAEC;MAA2B,CAAE,GAC3D,EAAAC,EAAA,GAAAX,MAAM,CAACG,mBAAmB,cAAAQ,EAAA,uBAAAA,EAAA,CAAEC,OAAO,KAAI,EAAE;MAE3C,IAAI,CAACF,2BAA2B,IAAI,CAACD,sBAAsB,EAAE;QAC3DJ,WAAW,GAAG,CACZ,GAAGA,WAAW,EACd,IAAIE,oBAAoB,EAAE,EAC1B,IAAIC,yBAAyB,EAAE,CAChC;;MAGH,IAAIE,2BAA2B,EAAE;QAC/B,MAAM;UAAEG;QAAiB,CAAE,GAAG,MAAM,MAAM,CACxC,oCAAoC,CACrC;QAEDR,WAAW,CAACS,IAAI,CAAC,IAAID,iBAAiB,EAAE,CAAC;;MAG3C,IAAIJ,sBAAsB,EAAE;QAC1B,MAAM;UAAEM,gBAAgB;UAAEC;QAAY,CAAE,GAAG,MAAM,MAAM,CACrD,8BAA8B,CAC/B;QAED,MAAM;UAAEC,YAAY;UAAEC;QAAW,CAAE,GAAGT,sBAAsB;QAE5D,IAAIQ,YAAY,EAAE;UAChBZ,WAAW,CAACS,IAAI,CAAC,IAAIE,YAAY,EAAE,CAAC;;QAGtC,IAAIE,WAAW,EAAE;UACfb,WAAW,CAACS,IAAI,CACd,IAAIE,YAAY,CAAC;YAAEG,cAAc,EAAEJ,gBAAgB,CAACK;UAAY,CAAE,CAAC,CACpE;;;MAILnB,cAAc,CAACoB,QAAQ,CAAC;QACtBC,UAAU,EAAE,IAAIhB,mBAAmB,CAAC;UAClCD;SACD;OACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}