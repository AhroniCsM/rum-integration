import { CoralogixEventType, } from '../types';
import { stringMatchesSomePattern } from '../utils';
import { ErrorSource } from '../instrumentations/CoralogixErrorInstrumentation';
export function shouldDropEvent(cxRumEvent, options) {
    if (isDocumentErrorWithoutMessage(cxRumEvent)) {
        options.debug && console.warn('Document error without message dropped.');
        return true;
    }
    if (isIgnoredError(cxRumEvent, options.ignoreErrors)) {
        options.debug && console.warn('Ignored error dropped.');
        return true;
    }
    return false;
}
function isDocumentErrorWithoutMessage(cxRumEvent) {
    const { event_context, error_context } = cxRumEvent || {};
    return (event_context.type === CoralogixEventType.ERROR &&
        event_context.source === ErrorSource.DOCUMENT &&
        !(error_context === null || error_context === void 0 ? void 0 : error_context.error_message));
}
function isIgnoredError(cxRumEvent, ignoreErrors) {
    if (!cxRumEvent.error_context || !(ignoreErrors === null || ignoreErrors === void 0 ? void 0 : ignoreErrors.length)) {
        return false;
    }
    const errorMessage = cxRumEvent.error_context.error_message || '';
    return stringMatchesSomePattern(errorMessage, ignoreErrors);
}
//# sourceMappingURL=filters.js.map