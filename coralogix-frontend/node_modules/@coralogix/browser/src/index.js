import { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';
import { getInstrumentationConfig, partition, saveInternalRumData, } from './utils';
import { CoralogixSpanAttributesProcessor } from './processors/CoralogixSpanAttributesProcessor';
import { UrlType, } from './types';
import { CoralogixAttributes, INSTRUMENTATIONS, MAX_EXPORT_BATCH_SIZE, NETWORK_URL_LABEL_PROVIDERS_KEY, OPTIONS_DEFAULTS, PAGE_URL_LABEL_PROVIDERS_KEY, SCHEDULE_DELAY_MILLIS, SDK_CONFIG_KEY, } from './constants';
import { CoralogixExporter } from './processors/CoralogixExporter';
import { CoralogixLogSeverity } from './types-external';
import { CoralogixCustomLogInstrumentation } from './instrumentations/CoralogixCustomLogInstrumentation';
import { CoralogixWebTracerProvider } from './CoralogixWebTracerProvider';
import { SessionManager } from './session/sessionManager';
import { getSessionManager, getSessionRecorder } from './helpers';
import { INTERNAL_INSTRUMENTATION_NAME } from './instrumentations/instrumentation.consts';
import { reportInternalEvent } from './internal-event-reporter';
import { handlePropagators } from './propagators';
import { validateAndResolveInitConfig } from './configuration';
import { isSamplingOn } from './session/session.helper';
import { CoralogixSpanMapProcessor } from './processors/CoralogixSpanMapProcessor';
import { CoralogixSnapshotSpanProcessor } from './processors/CoralogixSnapshotSpanProcessor';
import { SnapshotManager } from './snapshot/snapshotManager';
import { registerInstrumentations } from '@opentelemetry/instrumentation';
import { CoralogixNavigationProcessor } from './processors/CoralogixNavigationProcessor';
let isInited = false;
let _deregisterInstrumentations;
let _customInstrumentation;
let tracerProvider;
let attributesProcessor;
let snapshotProcessor;
let spanMapProcessor;
let navigationProcessor;
let exporter;
export const CoralogixRum = {
    get isInited() {
        return isInited;
    },
    init: function (options) {
        // Check if CoralogixRum already inited.
        if (isInited) {
            console.warn('CoralogixRum already inited.');
            return;
        }
        // Abort if running in a non-browser environment.
        if (typeof window !== 'object') {
            console.warn('CoralogixRum: Non-browser environment detected, aborting');
            return;
        }
        // Abort if running in a not supported browser.
        if (typeof Symbol !== 'function') {
            console.error('CoralogixRum: browser not supported, disabling instrumentation.');
            return;
        }
        const resolvedOptions = validateAndResolveInitConfig(options);
        if (!resolvedOptions) {
            return;
        }
        window[SDK_CONFIG_KEY] = resolvedOptions;
        if (
        //todo: remove when sessionSampleRate is removed
        !isSamplingOn(resolvedOptions.sessionSampleRate) ||
            !isSamplingOn(resolvedOptions.sessionConfig.sessionSampleRate)) {
            if (options.debug) {
                console.debug('CoralogixRum: Session tracking is disabled');
            }
            return;
        }
        // Check if not in debug mode & no auth token.
        if (!resolvedOptions.debug && !resolvedOptions.public_key) {
            console.warn('rumAuth will be required in the future');
        }
        new SessionManager(resolvedOptions.sessionRecordingConfig).start();
        const { ignoreUrls, labels, user_context, application, version, traceParentInHeader, environment, } = resolvedOptions;
        tracerProvider = new CoralogixWebTracerProvider();
        const pluginDefaults = {};
        // Resolve instrumentations.
        const instrumentations = INSTRUMENTATIONS.map(({ Instrument, confKey, disable }) => {
            var _a;
            const pluginConf = getInstrumentationConfig((_a = resolvedOptions === null || resolvedOptions === void 0 ? void 0 : resolvedOptions.instrumentations) === null || _a === void 0 ? void 0 : _a[confKey], pluginDefaults, disable);
            if (pluginConf) {
                let instrumentation;
                switch (confKey) {
                    case 'errors': {
                        instrumentation = new Instrument(Object.assign(Object.assign({}, pluginConf), { ignoreErrors: options === null || options === void 0 ? void 0 : options.ignoreErrors }));
                        break;
                    }
                    case 'fetch':
                    case 'xhr': {
                        instrumentation = new Instrument(Object.assign(Object.assign({}, pluginConf), { ignoreUrls,
                            traceParentInHeader }));
                        break;
                    }
                    case INTERNAL_INSTRUMENTATION_NAME: {
                        instrumentation = new Instrument(pluginConf);
                        saveInternalRumData(INTERNAL_INSTRUMENTATION_NAME, instrumentation);
                        break;
                    }
                    default:
                        instrumentation = new Instrument(pluginConf);
                }
                if (instrumentation instanceof CoralogixCustomLogInstrumentation) {
                    _customInstrumentation = instrumentation;
                }
                return instrumentation;
            }
            return null;
        }).filter((a) => Boolean(a));
        const mergedUserContext = Object.assign(Object.assign({}, OPTIONS_DEFAULTS.user_context), user_context);
        // Init Span Attributes Processor.
        attributesProcessor = new CoralogixSpanAttributesProcessor(Object.assign({ [CoralogixAttributes.APPLICATION_CONTEXT]: JSON.stringify({
                application,
                version,
            }), [CoralogixAttributes.USER_CONTEXT]: JSON.stringify(mergedUserContext) }, (environment
            ? { [CoralogixAttributes.ENVIRONMENT]: environment }
            : {})));
        if (labels) {
            attributesProcessor.setCustomLabels(labels);
        }
        // The order of processors is important.
        tracerProvider.addSpanProcessor(attributesProcessor);
        // Add Navigation Processor
        navigationProcessor = new CoralogixNavigationProcessor();
        tracerProvider.addSpanProcessor(navigationProcessor);
        // Add Span Mapping Processor
        spanMapProcessor = new CoralogixSpanMapProcessor();
        tracerProvider.addSpanProcessor(spanMapProcessor);
        // Add snapshot processor
        new SnapshotManager();
        snapshotProcessor = new CoralogixSnapshotSpanProcessor();
        tracerProvider.addSpanProcessor(snapshotProcessor);
        // Add Batch Span Processor and Exporter
        tracerProvider.addSpanProcessor(new BatchSpanProcessor((exporter = new CoralogixExporter()), {
            maxExportBatchSize: MAX_EXPORT_BATCH_SIZE,
            scheduledDelayMillis: SCHEDULE_DELAY_MILLIS,
        }));
        handlePropagators(options, tracerProvider);
        // Register Instrumentations
        _deregisterInstrumentations = registerInstrumentations({
            tracerProvider,
            instrumentations,
        });
        const [pageUrlLabelProviders, networkUrlLabelProviders] = partition(resolvedOptions.labelProviders || [], ({ urlType }) => urlType === UrlType.PAGE || !urlType);
        saveInternalRumData(PAGE_URL_LABEL_PROVIDERS_KEY, pageUrlLabelProviders);
        saveInternalRumData(NETWORK_URL_LABEL_PROVIDERS_KEY, networkUrlLabelProviders);
        isInited = true;
        if (options === null || options === void 0 ? void 0 : options.debug) {
            console.info('CoralogixRum.init() complete');
        }
        reportInternalEvent('init');
    },
    shutdown() {
        var _a;
        if (!isInited) {
            return;
        }
        _deregisterInstrumentations === null || _deregisterInstrumentations === void 0 ? void 0 : _deregisterInstrumentations();
        _deregisterInstrumentations = undefined;
        this.stopSessionRecording();
        (_a = getSessionManager()) === null || _a === void 0 ? void 0 : _a.stop();
        attributesProcessor === null || attributesProcessor === void 0 ? void 0 : attributesProcessor.shutdown();
        navigationProcessor === null || navigationProcessor === void 0 ? void 0 : navigationProcessor.shutdown();
        spanMapProcessor === null || spanMapProcessor === void 0 ? void 0 : spanMapProcessor.shutdown();
        snapshotProcessor === null || snapshotProcessor === void 0 ? void 0 : snapshotProcessor.shutdown();
        exporter === null || exporter === void 0 ? void 0 : exporter.shutdown();
        isInited = false;
    },
    setApplicationContext(applicationContext) {
        if (!isInited) {
            console.debug('CoralogixRum must be initiated before setting application context');
            return;
        }
        attributesProcessor === null || attributesProcessor === void 0 ? void 0 : attributesProcessor.setInternalLabels(Object.assign(Object.assign({}, attributesProcessor.getInternalLabels()), { [CoralogixAttributes.APPLICATION_CONTEXT]: applicationContext }));
    },
    stopSessionRecording() {
        var _a;
        (_a = getSessionRecorder()) === null || _a === void 0 ? void 0 : _a.stopRecording();
    },
    startSessionRecording() {
        var _a;
        (_a = getSessionRecorder()) === null || _a === void 0 ? void 0 : _a.startRecording();
    },
    setUserContext(userContext) {
        if (!isInited) {
            console.debug('CoralogixRum must be initiated before setting user context');
            return;
        }
        attributesProcessor === null || attributesProcessor === void 0 ? void 0 : attributesProcessor.setInternalLabels(Object.assign(Object.assign({}, attributesProcessor.getInternalLabels()), { [CoralogixAttributes.USER_CONTEXT]: userContext }));
    },
    getUserContext() {
        return attributesProcessor === null || attributesProcessor === void 0 ? void 0 : attributesProcessor.getUserContext();
    },
    setLabels(labels) {
        attributesProcessor === null || attributesProcessor === void 0 ? void 0 : attributesProcessor.setCustomLabels(labels);
    },
    getLabels() {
        return (attributesProcessor === null || attributesProcessor === void 0 ? void 0 : attributesProcessor.getCustomLabels()) || {};
    },
    getSessionId() {
        var _a, _b;
        return (_b = (_a = getSessionManager()) === null || _a === void 0 ? void 0 : _a.getSession()) === null || _b === void 0 ? void 0 : _b.sessionId;
    },
    log(severity, message, data) {
        if (!isInited) {
            console.debug('CoralogixRum must be initiated before using log');
            return;
        }
        if (!_customInstrumentation) {
            console.error('Log was reported, but custom instrumentation is disabled.');
            return;
        }
        _customInstrumentation === null || _customInstrumentation === void 0 ? void 0 : _customInstrumentation.log(severity, message, data);
    },
    debug(message, data) {
        this.log(CoralogixLogSeverity.Debug, message, data);
    },
    verbose(message, data) {
        this.log(CoralogixLogSeverity.Verbose, message, data);
    },
    info(message, data) {
        this.log(CoralogixLogSeverity.Info, message, data);
    },
    warn(message, data) {
        this.log(CoralogixLogSeverity.Warn, message, data);
    },
    error(message, data) {
        this.log(CoralogixLogSeverity.Error, message, data);
    },
    critical(message, data) {
        this.log(CoralogixLogSeverity.Critical, message, data);
    },
};
window.CoralogixRum = CoralogixRum;
//# sourceMappingURL=index.js.map