var _a;
import { BASE_PATH, CoralogixAttributes, HASH_SEPARATOR, MAX_CHARACTERS, PARAMS_SEPARATOR, PROTOCOL_SEPARATOR, } from '../constants';
import { LONGTASK_DURATION } from '../instrumentations/instrumentation.consts';
import { getSdkConfig } from '../helpers';
import { omit } from './object';
import { getNowTime } from './time';
export const supportedPerformanceTypes = !((_a = window === null || window === void 0 ? void 0 : window.PerformanceObserver) === null || _a === void 0 ? void 0 : _a.supportedEntryTypes)
    ? {}
    : window.PerformanceObserver.supportedEntryTypes.reduce((obj, type) => {
        obj[type] = true;
        return obj;
    }, {});
export function valueEndWithOrInclude(value, extensions) {
    return extensions.some((ex) => value.endsWith(ex) || value.includes(ex));
}
export function getInstrumentationConfig(value, defaults, defaultDisable) {
    if (value === false) {
        return value;
    }
    if (value === undefined && defaultDisable) {
        return false;
    }
    if ((value === null || value === void 0 ? void 0 : value.enabled) === false) {
        return false;
    }
    return Object.assign({}, defaults, value);
}
export const hrTimeToMilliseconds = ([seconds, nanoseconds]) => seconds * 1000 + Math.round(nanoseconds / 1e6);
export const isNetworkError = (status) => {
    if (!status) {
        return false;
    }
    return status >= 400;
};
export const getUrlFragments = (url) => {
    var _a, _b;
    if (!url) {
        return '';
    }
    const withoutProtocol = ((_a = url.split(PROTOCOL_SEPARATOR)) === null || _a === void 0 ? void 0 : _a[1]) || url;
    const startPath = (_b = withoutProtocol.split(BASE_PATH)) === null || _b === void 0 ? void 0 : _b[1];
    if (startPath === null || startPath === void 0 ? void 0 : startPath.startsWith(HASH_SEPARATOR)) {
        const fragments = withoutProtocol.split(HASH_SEPARATOR)[1];
        const cleanedFragments = fragments.split(PARAMS_SEPARATOR)[0];
        const pathFragments = cleanedFragments.split(BASE_PATH);
        if (pathFragments.length) {
            pathFragments.shift();
        }
        return pathFragments.join(BASE_PATH) || BASE_PATH;
    }
    else {
        try {
            return new URL(url).pathname.substring(1) || BASE_PATH;
        }
        catch (err) {
            console.warn('Coralogix Browser SDK - Error parsing URL', err);
            return url;
        }
    }
};
export function parseUserAgent(userAgent) {
    var _a, _b;
    const browsers = {
        Chrome: /Chrome\/([\d.]+)/,
        Firefox: /Firefox\/([\d.]+)/,
        Safari: /Version\/([\d.]+).*Safari/,
        Edge: /Edge\/([\d.]+)/,
        Opera: /Opera\/([\d.]+)/,
        IE: /Trident.*rv:([\d.]+)/,
    };
    const operatingSystems = {
        Windows: /Windows NT ([\d.]+)/,
        MacOS: /Mac OS X ([\d._]+)/,
        Linux: /Linux(?: ([\d.]+))?/,
        iOS: /CPU(?: iPhone)? OS (\d+([._]\d+)*)/,
        Android: /Android (\d+([._]\d+)*)/,
    };
    const devices = {
        Mobile: /Mobile|Android|iPhone|iPod|BlackBerry|IEMobile|Windows Phone|webOS|Opera Mini/,
        Tablet: /Tablet|iPad/,
    };
    let browser = 'Unknown';
    let browserVersion = 'Unknown';
    let os = 'Unknown';
    let osVersion = 'Unknown';
    let device = 'Desktop';
    for (const [name, regex] of Object.entries(browsers)) {
        const match = userAgent.match(regex);
        if (match) {
            browser = name;
            browserVersion = match[1] || 'Unknown';
            break;
        }
    }
    for (const [name, regex] of Object.entries(operatingSystems)) {
        const match = userAgent.match(regex);
        if (match) {
            os = name;
            osVersion = ((_b = (_a = match[1]) === null || _a === void 0 ? void 0 : _a.split('_')) === null || _b === void 0 ? void 0 : _b.join('.')) || 'Unknown';
            break;
        }
    }
    for (const [name, regex] of Object.entries(devices)) {
        const match = userAgent.match(regex);
        if (match) {
            device = name;
            break;
        }
    }
    return { browser, browserVersion, os, osVersion, device };
}
export function calculateTotalBlockingTime(list) {
    return list.reduce((total, entry) => {
        total += entry.duration - LONGTASK_DURATION;
        return total;
    }, 0);
}
export function generateWebVitalUniqueID() {
    return `v3-${getNowTime()}-${Math.floor(Math.random() * (9e12 - 1)) + 1e12}`;
}
export function rateForTBTMetricValue(value // ms
) {
    switch (true) {
        case value > 600:
            return 'poor';
        case value > 200 && value <= 600:
            return 'needs-improvement';
        default:
            return 'good';
    }
}
export function flattenAttributes(attributes) {
    const customLabels = JSON.parse(attributes[CoralogixAttributes.CUSTOM_LABELS]);
    const flatAttributes = omit(attributes, CoralogixAttributes.CUSTOM_LABELS);
    for (const [key, value] of Object.entries(customLabels)) {
        flatAttributes[key] =
            typeof value !== 'string' ? JSON.stringify(value) : value;
    }
    return flatAttributes;
}
export const getCircularReplacer = () => {
    const seen = new WeakSet();
    return (key, value) => {
        if (typeof value === 'object' && value !== null) {
            if (seen.has(value)) {
                return;
            }
            seen.add(value);
        }
        return value;
    };
};
export function replacePatternsInUrl({ patterns, url, }) {
    let modifiedUrl = url;
    for (const { pattern, replacement } of patterns) {
        modifiedUrl = modifiedUrl.replace(pattern, replacement);
    }
    return modifiedUrl;
}
export function applyUrlBluePrinters({ url, blueprinters, }) {
    let blueprintedUrl = url;
    blueprinters === null || blueprinters === void 0 ? void 0 : blueprinters.forEach((urlBlueprinter) => (blueprintedUrl = urlBlueprinter(blueprintedUrl)));
    return blueprintedUrl;
}
export function resolvePageContext(url) {
    var _a;
    const page_url_blueprint = applyUrlBluePrinters({
        url,
        blueprinters: (_a = getSdkConfig().urlBlueprinters) === null || _a === void 0 ? void 0 : _a.pageUrlBlueprinters,
    });
    const page_fragments = getUrlFragments(page_url_blueprint);
    return {
        page_url: url.slice(0, MAX_CHARACTERS),
        page_url_blueprint,
        page_fragments,
    };
}
export function deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
}
export function partition(array, predicate) {
    const truthyValues = [];
    const falsyValues = [];
    for (const element of array) {
        if (predicate(element)) {
            truthyValues.push(element);
        }
        else {
            falsyValues.push(element);
        }
    }
    return [truthyValues, falsyValues];
}
//# sourceMappingURL=all.js.map