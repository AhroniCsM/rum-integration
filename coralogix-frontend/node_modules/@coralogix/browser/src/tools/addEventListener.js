import { getZoneJsOriginalDom } from './getZoneJsOriginalDom';
/**
 * Add an event listener to an event target object (Window, Element, mock...).
 * Returns a `stop` function to remove the listener
 */
export function addEventListener(eventTarget, eventName, listener, options) {
    return addEventListeners(eventTarget, [eventName], listener, options);
}
/**
 * Add event listeners to an event target object.
 */
export function addEventListeners(eventTarget, eventNames, listener, { once, capture, passive } = {}) {
    const resolvedListener = once
        ? (event) => {
            stop();
            listener(event);
        }
        : listener;
    const options = passive ? { capture, passive } : capture;
    const addListener = getZoneJsOriginalDom(eventTarget, 'addEventListener');
    eventNames.forEach((eventName) => addListener.call(eventTarget, eventName, resolvedListener, options));
    function stop() {
        const remove = getZoneJsOriginalDom(eventTarget, 'removeEventListener');
        eventNames.forEach((eventName) => remove.call(eventTarget, eventName, resolvedListener, options));
    }
    return {
        stop,
    };
}
//# sourceMappingURL=addEventListener.js.map