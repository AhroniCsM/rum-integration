export declare const enum DOM_EVENT {
    CLICK = "click",
    KEY_DOWN = "keydown",
    TOUCH_START = "touchstart",
    INPUT = "input",
    MOUSE_MOVE = "mousemove"
}
type EventMap<T> = T extends Window ? WindowEventMap & {
    visibilitychange: Event;
    freeze: Event;
    resume: Event;
} : T extends Document ? DocumentEventMap : T extends HTMLElement ? HTMLElementEventMap : T extends VisualViewport ? VisualViewportEventMap : T extends ShadowRoot ? GlobalEventHandlersEventMap : T extends XMLHttpRequest ? XMLHttpRequestEventMap : T extends Performance ? PerformanceEventMap : T extends Worker ? WorkerEventMap : Record<never, never>;
/**
 * Add an event listener to an event target object (Window, Element, mock...).
 * Returns a `stop` function to remove the listener
 */
export declare function addEventListener<Target extends EventTarget, EventName extends keyof EventMap<Target> & string>(eventTarget: Target, eventName: EventName, listener: (event: EventMap<Target>[EventName]) => void, options?: AddEventListenerOptions): {
    stop: () => void;
};
/**
 * Add event listeners to an event target object.
 */
export declare function addEventListeners<Target extends EventTarget, EventName extends keyof EventMap<Target> & string>(eventTarget: Target, eventNames: EventName[], listener: (event: EventMap<Target>[EventName]) => void, { once, capture, passive }?: AddEventListenerOptions): {
    stop: () => void;
};
export {};
