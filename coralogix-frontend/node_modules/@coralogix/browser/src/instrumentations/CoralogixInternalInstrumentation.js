import { InstrumentationBase, } from '@opentelemetry/instrumentation';
import { CoralogixAttributes } from '../constants';
import { CoralogixLogSeverity } from '../types-external';
import { CoralogixEventType } from '../types';
import { getSdkConfig } from '../helpers';
import { omit } from '../utils/object';
export const INTERNAL_INSTRUMENTATION_VERSION = '1';
export class CoralogixInternalInstrumentation extends InstrumentationBase {
    constructor(config) {
        super(CoralogixEventType.INTERNAL, INTERNAL_INSTRUMENTATION_VERSION, config);
    }
    init() { }
    disable() { }
    enable() { }
    reportInternalEvent(event, message = '') {
        const span = this.tracer.startSpan(CoralogixEventType.INTERNAL);
        let data;
        span.setAttribute(CoralogixAttributes.EVENT_TYPE, CoralogixEventType.INTERNAL);
        span.setAttribute(CoralogixAttributes.SEVERITY, CoralogixLogSeverity.Info);
        switch (event) {
            case 'init': {
                const config = omit(getSdkConfig(), 'public_key', 'coralogixDomain');
                data = this.stringifyConfig(config);
                break;
            }
            case 'recording-start':
                break;
            case 'recording-stop':
                data = message;
                break;
            default:
                break;
        }
        span.setAttribute(CoralogixAttributes.INTERNAL, JSON.stringify({
            event,
            data,
        }));
        span.end();
    }
    stringifyConfig(config) {
        const replacer = (key, value) => {
            if (value instanceof RegExp) {
                return value.toString();
            }
            return value;
        };
        return JSON.stringify(config, replacer);
    }
}
//# sourceMappingURL=CoralogixInternalInstrumentation.js.map