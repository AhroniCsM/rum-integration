import { InstrumentationBase, InstrumentationConfig } from '@opentelemetry/instrumentation';
export declare const ERROR_INSTRUMENTATION_NAME = "errors";
export declare const ERROR_INSTRUMENTATION_VERSION = "1";
export declare const ErrorAttributes: {
    TYPE: string;
    STACK: string;
    MESSAGE: string;
};
export declare enum ErrorSource {
    CONSOLE = "console",
    WINDOW = "window",
    UNHANDLED_REJECTION = "unhandledrejection",
    DOCUMENT = "document"
}
export interface CoralogixErrorInstrumentationConfig extends InstrumentationConfig {
    ignoreErrors?: Array<string | RegExp>;
}
export declare class CoralogixErrorInstrumentation extends InstrumentationBase {
    ignoreErrors?: Array<string | RegExp>;
    constructor(config: CoralogixErrorInstrumentationConfig);
    init(): void;
    enable(): void;
    disable(): void;
    report(source: ErrorSource, arg: string | Error | Event | ErrorEvent | Array<any>): void;
    parseErrorObject: (obj: any) => string;
    protected reportError(source: ErrorSource, err: Error): void;
    protected reportString(source: ErrorSource, message: string, firstError?: Error): void;
    protected reportErrorEvent(source: ErrorSource, { error, message }: ErrorEvent): void;
    protected reportEvent(source: string, ev: Event): void;
    protected getPossibleEventMessage(event: any): string;
}
