import { InstrumentationBase, } from '@opentelemetry/instrumentation';
import { LONG_TASK_INSTRUMENTATION_VERSION, LONG_TASK_PERFORMANCE_TYPE, } from './instrumentation.consts';
import { CoralogixEventType, PerformanceTypes, } from '../types';
import { CoralogixAttributes } from '../constants';
import { deepClone, generateUUID, supportedPerformanceTypes } from '../utils';
export class CoralogixLongTaskInstrumentation extends InstrumentationBase {
    constructor(config) {
        super(LONG_TASK_PERFORMANCE_TYPE, LONG_TASK_INSTRUMENTATION_VERSION, config);
        if (supportedPerformanceTypes[PerformanceTypes.LongTask]) {
            this.registerToLongTasks();
        }
        else {
            console.warn('Coralogix Browser SDK - browser doesnt support longtask events');
        }
    }
    registerToLongTasks() {
        this.longTaskObserver = new PerformanceObserver((list) => {
            list
                .getEntries()
                .forEach((entry) => this.createSpanFromLongTask(entry));
        });
        this.longTaskObserver.observe({
            type: PerformanceTypes.LongTask,
            buffered: true,
        });
    }
    createSpanFromLongTask(entry) {
        const longTaskSpan = this.tracer.startSpan(CoralogixEventType.LONG_TASK);
        const longTaskContext = Object.assign(Object.assign({}, deepClone(entry)), { id: generateUUID() });
        if (entry['toJSON']) {
            delete longTaskContext['toJSON'];
        }
        if (entry['attribution']) {
            delete longTaskContext['attribution'];
        }
        longTaskSpan.setAttribute(CoralogixAttributes.EVENT_TYPE, CoralogixEventType.LONG_TASK);
        longTaskSpan.setAttribute(LONG_TASK_PERFORMANCE_TYPE, JSON.stringify(longTaskContext));
        longTaskSpan.end();
    }
    enable() { }
    disable() {
        var _a;
        (_a = this.longTaskObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
    }
    init() {
        return undefined;
    }
}
//# sourceMappingURL=CoralogixLongTaskInstrumentation.js.map