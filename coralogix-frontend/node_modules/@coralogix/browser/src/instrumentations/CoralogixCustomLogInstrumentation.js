import { InstrumentationBase, } from '@opentelemetry/instrumentation';
import { CoralogixAttributes } from '../constants';
import { CoralogixEventType } from '../types';
import { getSdkConfig } from '../helpers';
import { getCircularReplacer } from '../utils';
export const CUSTOM_INSTRUMENTATION_VERSION = '1';
export var LogSource;
(function (LogSource) {
    LogSource["CODE"] = "code";
})(LogSource || (LogSource = {}));
export class CoralogixCustomLogInstrumentation extends InstrumentationBase {
    constructor(config) {
        var _a;
        super(CoralogixEventType.LOG, CUSTOM_INSTRUMENTATION_VERSION, config);
        this.stringifyCustomLogData = (_a = getSdkConfig()) === null || _a === void 0 ? void 0 : _a.stringifyCustomLogData;
    }
    init() { }
    disable() { }
    enable() { }
    log(severity, message, data) {
        const span = this.tracer.startSpan(CoralogixEventType.LOG);
        span.setAttribute(CoralogixAttributes.EVENT_TYPE, CoralogixEventType.LOG);
        span.setAttribute(CoralogixAttributes.SOURCE, LogSource.CODE);
        span.setAttribute(CoralogixAttributes.SEVERITY, severity);
        span.setAttribute(CoralogixAttributes.LOG, JSON.stringify({
            severity,
            message,
            data: this.stringifyCustomLogData
                ? JSON.stringify(data, getCircularReplacer())
                : data,
        }));
        span.end();
    }
}
//# sourceMappingURL=CoralogixCustomLogInstrumentation.js.map