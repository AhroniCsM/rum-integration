import { InstrumentationBase } from '@opentelemetry/instrumentation';
import { onCLS, onFCP, onFID, onINP, onLCP, onTTFB, } from 'web-vitals/attribution';
import { CoralogixAttributes } from '../constants';
import { CoralogixEventType, PerformanceTypes } from '../types';
import { isEmpty, omit } from '../utils/object';
import { ALL_WEB_VITALS_METRICS, WEB_VITALS_INSTRUMENTATION_NAME, WEB_VITALS_INSTRUMENTATION_VERSION, } from './instrumentation.consts';
import { calculateTotalBlockingTime, generateWebVitalUniqueID, getCircularReplacer, rateForTBTMetricValue, supportedPerformanceTypes, } from '../utils';
export class CoralogixWebVitalsInstrumentation extends InstrumentationBase {
    constructor(config) {
        super(WEB_VITALS_INSTRUMENTATION_NAME, WEB_VITALS_INSTRUMENTATION_VERSION, config);
        this.metrics = isEmpty(config.metrics)
            ? ALL_WEB_VITALS_METRICS
            : config.metrics;
        this.registerToCoreWebVitalMetrics();
        this.registerToCalculatedWebVitalMetrics();
    }
    registerToCoreWebVitalMetrics() {
        // Capture First Input Delay
        if (this.metrics.fid) {
            onFID((metric) => {
                this.onReport(metric);
            });
        }
        // Capture Cumulative Layout Shift
        if (this.metrics.cls) {
            onCLS((metric) => {
                this.onReport(metric);
            });
        }
        // Capture Largest Contentful Paint
        if (this.metrics.lcp) {
            onLCP((metric) => {
                this.onReport(metric);
            });
        }
        // Capture First Contentful Paint
        if (this.metrics.fcp) {
            onFCP((metric) => {
                this.onReport(metric);
            });
        }
        // Capture Interaction to Next Paint
        if (this.metrics.inp) {
            onINP((metric) => {
                this.onReport(metric);
            });
        }
        // Capture Time to First Byte
        if (this.metrics.ttfb) {
            onTTFB((metric) => {
                this.onReport(metric);
            });
        }
    }
    registerToCalculatedWebVitalMetrics() {
        if (supportedPerformanceTypes[PerformanceTypes.LongTask]) {
            if (this.metrics.tbt) {
                this.calculateAllTotalBlockingTime();
            }
        }
        else {
            console.warn('Coralogix Browser SDK - browser doesnt support TBT events');
        }
        if (supportedPerformanceTypes[PerformanceTypes.Navigation]) {
            if (this.metrics.lt) {
                this.calculateLoadingPageTime();
            }
        }
        else {
            console.warn('Coralogix Browser SDK - browser doesnt support navigation events');
        }
    }
    // function that creates a span for each web vital and reports the data
    // as attributes
    onReport(metric) {
        // start the span
        const webVitalsSpan = this.tracer.startSpan(CoralogixEventType.WEB_VITALS);
        let metricData = metric.entries ? omit(metric, 'entries') : metric;
        metricData = omit(metricData, 'attribution.navigationEntry');
        if (metricData.name === 'INP') {
            metricData = omit(metricData, 'attribution.interactionTargetElement');
        }
        webVitalsSpan.setAttribute(CoralogixAttributes.EVENT_TYPE, CoralogixEventType.WEB_VITALS);
        // add core web vital attributes
        webVitalsSpan.setAttribute(WEB_VITALS_INSTRUMENTATION_NAME, JSON.stringify(metricData, getCircularReplacer()));
        // end the span
        webVitalsSpan.end();
    }
    calculateLoadingPageTime() {
        this.loadingPageObserver = new PerformanceObserver((list) => {
            let loadTimeMetric = {};
            // @ts-ignore
            list.getEntries().forEach((entry) => {
                const { duration, type, name } = entry;
                loadTimeMetric = {
                    //@ts-ignore
                    name: 'LT',
                    id: generateWebVitalUniqueID(),
                    value: duration,
                    url: name,
                    //@ts-ignore
                    navigationType: type,
                };
                if (duration) {
                    this.onReport(loadTimeMetric);
                }
            });
        });
        this.loadingPageObserver.observe({
            type: PerformanceTypes.Navigation,
            buffered: true,
        });
    }
    calculateAllTotalBlockingTime() {
        this.totalBLockingTimeObserver = new PerformanceObserver((list) => {
            const totalBlockingTime = calculateTotalBlockingTime(list.getEntries());
            const tbtMetric = {
                //@ts-ignore
                name: 'TBT',
                id: generateWebVitalUniqueID(),
                rating: rateForTBTMetricValue(totalBlockingTime),
                value: totalBlockingTime,
            };
            this.onReport(tbtMetric);
        });
        this.totalBLockingTimeObserver.observe({
            type: PerformanceTypes.LongTask,
            buffered: true,
        });
    }
    enable() { }
    disable() {
        var _a, _b;
        (_a = this.loadingPageObserver) === null || _a === void 0 ? void 0 : _a.disconnect();
        (_b = this.totalBLockingTimeObserver) === null || _b === void 0 ? void 0 : _b.disconnect();
    }
    init() {
        return undefined;
    }
}
//# sourceMappingURL=CoralogixWebVitalsInstrumentation.js.map