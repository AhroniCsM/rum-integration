import { CoralogixAttributes } from '../constants';
import { getNowTime } from '../utils/time';
export class CoralogixSpanAttributesProcessor {
    constructor(labels) {
        this.labels = {
            [CoralogixAttributes.CUSTOM_LABELS]: '{}',
        };
        if (labels) {
            this.labels = labels;
        }
    }
    setCustomLabels(labels) {
        this.labels[CoralogixAttributes.CUSTOM_LABELS] = JSON.stringify(labels !== null && labels !== void 0 ? labels : {});
    }
    setInternalLabels(labels) {
        this.labels = Object.assign({ [CoralogixAttributes.CUSTOM_LABELS]: this.labels[CoralogixAttributes.CUSTOM_LABELS] }, (labels ? this.stringifyValues(labels) : {}));
    }
    getLabels() {
        return JSON.parse(JSON.stringify(this.labels));
    }
    getCustomLabels() {
        return JSON.parse(this.labels[CoralogixAttributes.CUSTOM_LABELS]);
    }
    getInternalLabels() {
        const labels = Object.assign({}, this.labels);
        delete labels[CoralogixAttributes.CUSTOM_LABELS];
        return labels;
    }
    getUserContext() {
        const userContext = this.labels[CoralogixAttributes.USER_CONTEXT];
        return userContext ? JSON.parse(`${userContext}`) : undefined;
    }
    forceFlush() {
        return Promise.resolve();
    }
    onStart(span) {
        span.setAttribute(CoralogixAttributes.TIMESTAMP, getNowTime());
        span.setAttribute(CoralogixAttributes.USER_AGENT, navigator.userAgent);
        span.setAttributes(this.labels);
    }
    onEnd() { }
    shutdown() {
        return Promise.resolve();
    }
    stringifyValues(labels) {
        const resolvedLabels = {};
        for (const key in labels) {
            resolvedLabels[key] =
                typeof labels[key] === 'string'
                    ? labels[key]
                    : JSON.stringify(labels[key]);
        }
        return resolvedLabels;
    }
}
//# sourceMappingURL=CoralogixSpanAttributesProcessor.js.map