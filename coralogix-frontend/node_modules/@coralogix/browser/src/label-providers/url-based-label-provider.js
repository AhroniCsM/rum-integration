import { isEmpty, isNotEmpty } from '../utils/object';
export class UrlBasedLabelProvider {
    constructor(config) {
        const { urlPatterns, defaultLabels, urlType } = config;
        const compiledRegexps = urlPatterns.map(({ regexps }) => regexps.map((regexp) => new RegExp(regexp)));
        this.urlType = urlType;
        this.providerFunc = (url, _) => {
            let providerLabels = {};
            outerLoop: for (const [index, compiledRegex,] of compiledRegexps.entries()) {
                const { labels } = urlPatterns[index];
                if (compiledRegex.some((regexp) => regexp.test(url))) {
                    providerLabels = Object.assign(Object.assign({}, providerLabels), labels);
                    break outerLoop;
                }
            }
            const shouldAddDefaultLabels = isEmpty(providerLabels) && isNotEmpty(defaultLabels);
            if (shouldAddDefaultLabels) {
                providerLabels = Object.assign(Object.assign({}, providerLabels), defaultLabels);
            }
            return providerLabels;
        };
    }
}
//# sourceMappingURL=url-based-label-provider.js.map