import { MASK_CLASS_DEFAULT, MASK_INPUT_TYPES_DEFAULT, OPTIONS_DEFAULTS, REQUIRED_CONFIG_KEYS, } from './constants';
import { isNil } from './utils/general';
import { resolveSessionConfig, resolveSessionRecordingConfig, } from './session/session.helper';
function isInitialConfigValid(initConfig) {
    if (!initConfig) {
        console.warn('CoralogixRum: Initialization configuration missing');
        return;
    }
    // Ensure public key is provided when no proxy URL is set
    if (!initConfig.proxyUrl && !initConfig.public_key) {
        console.warn('CoralogixRum: Public key is missing');
        return;
    }
    for (const requiredProp of REQUIRED_CONFIG_KEYS) {
        if (isNil(initConfig[requiredProp])) {
            console.error(`CoralogixRum: Initialization aborted. Please provide the required property "${requiredProp}".`);
            return;
        }
    }
    return true;
}
export function validateAndResolveInitConfig(config) {
    var _a, _b, _c;
    if (!isInitialConfigValid(config)) {
        return;
    }
    const { ignoreUrls, urlBlueprinters } = config;
    const resolvedIgnoreUrls = [];
    ignoreUrls && resolvedIgnoreUrls.push(...ignoreUrls);
    OPTIONS_DEFAULTS.ignoreUrls &&
        resolvedIgnoreUrls.push(...OPTIONS_DEFAULTS.ignoreUrls);
    return Object.assign(Object.assign(Object.assign({}, OPTIONS_DEFAULTS), config), { maskInputTypes: (_a = config.maskInputTypes) !== null && _a !== void 0 ? _a : MASK_INPUT_TYPES_DEFAULT, maskClass: (_b = config.maskClass) !== null && _b !== void 0 ? _b : MASK_CLASS_DEFAULT, ignoreUrls: resolvedIgnoreUrls, urlBlueprinters: resolveUrlBlueprinters(urlBlueprinters), sessionSampleRate: (_c = config.sessionSampleRate) !== null && _c !== void 0 ? _c : 100, sessionConfig: resolveSessionConfig(config.sessionConfig), sessionRecordingConfig: resolveSessionRecordingConfig(config.sessionRecordingConfig) });
}
function resolveUrlBlueprinters(urlBlueprinters) {
    if (!urlBlueprinters) {
        return OPTIONS_DEFAULTS.urlBlueprinters;
    }
    const resolvedUrlBlueprinters = {
        pageUrlBlueprinters: [],
        networkUrlBlueprinters: [],
    };
    const concatBlueprinters = (urlBlueprinters) => {
        const { pageUrlBlueprinters, networkUrlBlueprinters } = urlBlueprinters || {};
        if (pageUrlBlueprinters) {
            resolvedUrlBlueprinters.pageUrlBlueprinters.push(...pageUrlBlueprinters);
        }
        if (networkUrlBlueprinters) {
            resolvedUrlBlueprinters.networkUrlBlueprinters.push(...networkUrlBlueprinters);
        }
    };
    concatBlueprinters(urlBlueprinters);
    if (OPTIONS_DEFAULTS.urlBlueprinters) {
        concatBlueprinters(OPTIONS_DEFAULTS.urlBlueprinters);
    }
    return resolvedUrlBlueprinters;
}
//# sourceMappingURL=configuration.js.map