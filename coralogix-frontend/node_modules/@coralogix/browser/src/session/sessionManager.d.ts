import { CoralogixEventType, PrevSession, Session } from '../types';
import { SessionConfig, SessionRecordingConfig } from './session.model';
import { SessionIdle } from './session-idle';
export declare class SessionManager extends SessionIdle {
    private _sessionConfig;
    private sessionRecorder;
    private activeSession;
    private sessionRecorderConfig;
    private _sessionHasError;
    private _cachedLogsSent;
    private _currentPageFragment;
    constructor(recordConfig?: SessionRecordingConfig);
    get currentPageFragment(): string | undefined;
    set currentPageFragment(value: string | undefined);
    get sessionConfig(): SessionConfig;
    get onlySessionWithErrorMode(): boolean;
    get maxRumEventsForSessionWithError(): number;
    get maxRecordTimeForSessionWithError(): number;
    get instrumentationsToSend(): Partial<Record<CoralogixEventType, boolean>> | undefined;
    get cachedLogsSent(): boolean;
    get sessionHasError(): boolean;
    set sessionHasError(value: boolean);
    set cachedLogsSent(val: boolean);
    getSessionKey(): string;
    getActiveSession(): Session;
    start(): void;
    stop(): void;
    getPrevSession: () => PrevSession;
    getSession: () => Session;
    private clearSessionWhenIdle;
    private clearPrevSession;
    private clearSession;
    private clearSessionWithErrorMode;
    setSession: (afterIdle?: boolean, sessionId?: string) => Session;
}
