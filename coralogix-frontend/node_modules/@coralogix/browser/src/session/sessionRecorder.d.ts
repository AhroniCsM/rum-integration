import { SessionRecordingConfig } from './session.model';
import { SessionManager } from './sessionManager';
export declare class SessionRecorder {
    private readonly sessionWorker;
    private readonly isAutoStartRecording;
    private readonly maxMutations;
    private readonly onlySessionWithErrorMode;
    private readonly maxRecordTimeForSessionWithError;
    private recordEvents;
    private recordEventsForSessionWithError;
    private recordRef;
    private recordConfig;
    private segmentIndexCounter;
    private sessionManager;
    private hasRecording;
    private recordingStopped;
    private batchingTimeInterval;
    private batchTimeDelay;
    private batchTimeout;
    private isErrorOccurred;
    private debugMode;
    private _recordingStopDueToTimeout;
    private mutationObserver;
    private request;
    constructor(sessionManager: SessionManager, recordConfig: SessionRecordingConfig);
    getSessionHasRecording(): boolean;
    getIsAutoStartRecording(): boolean;
    set recordingStopDueToTimeout(value: boolean);
    get recordingStopDueToTimeout(): boolean;
    startRecording(): void;
    stopRecording(): void;
    private stopMutationObserver;
    private startMutationObserver;
    private clearIntervals;
    private prepareRecordConfig;
    private handleRecordEvent;
    private handleRecordEventForSessionWithError;
    private prepareRecordEventsBeforeSend;
    private prepareRecordEventsForSessionWithError;
    private compressRecordData;
    private registerToWorkerMessages;
    private resetBatching;
    private sendRecordEvents;
    private handleSessionRecordingResponse;
    private startBatchingRecords;
}
