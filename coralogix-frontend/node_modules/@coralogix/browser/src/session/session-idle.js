import { addEventListeners } from '../tools/addEventListener';
export class SessionIdle {
    constructor(idleConfig) {
        this.idleConfig = idleConfig;
        this._isIdleActive = false;
        this.stopCallbacks = {};
        this.resetTimeout = () => {
            var _a, _b;
            (_b = (_a = this.stopCallbacks).clearTimeout) === null || _b === void 0 ? void 0 : _b.call(_a);
            const id = setTimeout(() => {
                this._isIdleActive = true;
                this.idleConfig.onIdle();
            }, this.idleConfig.timeoutDelay);
            this.stopCallbacks.clearTimeout = () => clearTimeout(id);
        };
        this.idlenessEventsHandler = () => {
            if (this._isIdleActive) {
                this._isIdleActive = false;
                this.idleConfig.onActive();
            }
            this.resetTimeout();
        };
    }
    get isIdleActive() {
        return this._isIdleActive;
    }
    startIdleListener() {
        this.resetTimeout();
        this.trackActivity();
    }
    stopIdleListener() {
        Object.values(this.stopCallbacks).forEach((cb) => cb());
    }
    trackActivity() {
        var _a, _b;
        (_b = (_a = this.stopCallbacks).removeActivityListeners) === null || _b === void 0 ? void 0 : _b.call(_a);
        const { stop } = addEventListeners(window, ["touchstart" /* DOM_EVENT.TOUCH_START */, "keydown" /* DOM_EVENT.KEY_DOWN */, "mousemove" /* DOM_EVENT.MOUSE_MOVE */], this.idlenessEventsHandler, { capture: true, passive: true });
        this.stopCallbacks.removeActivityListeners = stop;
    }
}
//# sourceMappingURL=session-idle.js.map