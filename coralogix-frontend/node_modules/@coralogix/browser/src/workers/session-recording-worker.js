// @ts-nocheck
export function getWorkerString() {
    const MAX_CHUNK_SIZE = 1024 * 1024; //1MB
    const ERROR_MESSAGE = 'Coralogix Browser SDK - Error from session recording worker:\n';
    try {
        importScripts('https://cdnjs.cloudflare.com/ajax/libs/pako/2.1.0/pako_deflate.es5.min.js');
    }
    catch (err) {
        console.warn(ERROR_MESSAGE, err);
        self.postMessage({
            event: 'stopRecording',
        });
        return;
    }
    self.onmessage = ({ data }) => {
        const recordsData = omitSquareBrackets(JSON.stringify(data.records));
        const sessionId = data.sessionId;
        const sessionCreationDate = data.sessionCreationDate;
        const gzipData = this.pako.gzip(recordsData);
        const gzipSize = gzipData.byteLength;
        if (gzipSize >= MAX_CHUNK_SIZE) {
            const totalChunks = Math.ceil(gzipSize / MAX_CHUNK_SIZE);
            for (let i = 0; i < totalChunks; i++) {
                const start = i * MAX_CHUNK_SIZE;
                const end = (i + 1) * MAX_CHUNK_SIZE;
                const chunk = gzipData.slice(start, end);
                createBlobAndSend(sessionId, sessionCreationDate, chunk, i, totalChunks - 1, 'splitRecordData');
            }
        }
        else {
            createBlobAndSend(sessionId, sessionCreationDate, gzipData);
        }
    };
    self.onerror = (err) => {
        console.warn(ERROR_MESSAGE, err);
        self.postMessage({
            event: 'stopRecording',
        });
    };
    function omitSquareBrackets(json) {
        return json.slice(1, -1);
    }
    function createBlobAndSend(sessionId, sessionCreationDate, gzipData, chunkIndex, totalChunks, event = 'sendRecordData') {
        const blob = new Blob([gzipData], {
            type: 'application/octet-stream',
        });
        self.postMessage({
            sessionId,
            sessionCreationDate,
            gzipBlob: blob,
            chunkIndex,
            totalChunks,
            event,
        });
    }
}
//# sourceMappingURL=session-recording-worker.js.map