import { INITIAL_SNAPSHOT_CONTEXT, SNAPSHOT_MANAGER_KEY, } from './snapshot.consts';
import { getNowTime } from '../utils/time';
export class SnapshotManager {
    constructor() {
        this.updateSnapshot = (overrides) => {
            this._currentSnapshot = Object.assign(Object.assign({}, this._currentSnapshot), overrides);
        };
        this.resetSnapshot = () => {
            this._currentSnapshot = Object.assign(Object.assign({}, INITIAL_SNAPSHOT_CONTEXT), { timestamp: getNowTime() });
            this._fragmentsState = new Set();
            this._isSnapshotSentDueToRecording = false;
        };
        window[SNAPSHOT_MANAGER_KEY] = this;
        this.resetSnapshot();
    }
    get fragmentsState() {
        return this._fragmentsState;
    }
    get currentSnapshot() {
        return this._currentSnapshot;
    }
    get isSnapshotSentDueToRecording() {
        return this._isSnapshotSentDueToRecording;
    }
    set isSnapshotSentDueToRecording(value) {
        this._isSnapshotSentDueToRecording = value;
    }
}
//# sourceMappingURL=snapshotManager.js.map